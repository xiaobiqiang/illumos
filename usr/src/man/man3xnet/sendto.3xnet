.\"
.\" Sun Microsystems, Inc. gratefully acknowledges The Open Group for
.\" permission to reproduce portions of its copyrighted documentation.
.\" Original documentation from The Open Group can be obtained online at
.\" http://www.opengroup.org/bookstore/.
.\"
.\" The Institute of Electrical and Electronics Engineers and The Open
.\" Group, have given us permission to reprint portions of their
.\" documentation.
.\"
.\" In the following statement, the phrase ``this text'' refers to portions
.\" of the system documentation.
.\"
.\" Portions of this text are reprinted and reproduced in electronic form
.\" in the SunOS Reference Manual, from IEEE Std 1003.1, 2004 Edition,
.\" Standard for Information Technology -- Portable Operating System
.\" Interface (POSIX), The Open Group Base Specifications Issue 6,
.\" Copyright (C) 2001-2004 by the Institute of Electrical and Electronics
.\" Engineers, Inc and The Open Group.  In the event of any discrepancy
.\" between these versions and the original IEEE and The Open Group
.\" Standard, the original IEEE and The Open Group Standard is the referee
.\" document.  The original Standard can be obtained online at
.\" http://www.opengroup.org/unix/online.html.
.\"
.\" This notice shall appear on any product containing this material.
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\"
.\" Copyright (c) 1992, X/Open Company Limited.  All Rights Reserved.
.\" Portions Copyright (c) 2003, Sun Microsystems, Inc.  All Rights Reserved.
.\"
.TH SENDTO 3XNET "Aug 16, 2018"
.SH NAME
sendto \- send a message on a socket
.SH SYNOPSIS
.LP
.nf
\fBcc\fR [ \fIflag\fR... ] \fIfile\fR... \fB-lxnet\fR [ \fIlibrary\fR ... ]
#include <sys/socket.h>

\fBssize_t\fR \fBsendto\fR(\fBint\fR \fIsocket\fR, \fBconst void *\fR\fImessage\fR, \fBsize_t\fR \fIlength\fR, \fBint\fR \fIflags\fR,
     \fBconst struct sockaddr *\fR\fIdest_addr\fR, \fBsocklen_t\fR \fIdest_len\fR);
.fi

.SH DESCRIPTION
.LP
The \fBsendto()\fR function sends a message through a connection-mode or
connectionless-mode socket.  If the socket is connectionless-mode, the message
will be sent to the address specified by \fIdest_addr\fR.  If the socket is
connection-mode, \fIdest_addr\fR is ignored.
.sp
.LP
If the socket protocol supports broadcast and the specified address is a
broadcast address for the socket protocol, \fBsendto()\fR will fail if the
\fBSO_BROADCAST\fR option is not set for the socket.
.sp
.LP
The \fIdest_addr\fR argument specifies the address of the target. The
\fIlength\fR argument specifies the length of the message.
.sp
.LP
Successful completion of a call to \fBsendto()\fR does not guarantee delivery
of the message. A return value of \fB\(mi1\fR indicates only locally-detected
errors.
.sp
.LP
If space is not available at the sending socket to hold the message to be
transmitted and the socket file descriptor does not have \fBO_NONBLOCK\fR set,
\fBsendto()\fR blocks until space is available. If space is not available at
the sending socket to hold the message to be transmitted and the socket file
descriptor does have \fBO_NONBLOCK\fR set, \fBsendto()\fR will fail.
.sp
.LP
The socket in use may require the process to have appropriate privileges to use
the \fBsendto()\fR function.
.SH PARAMETERS
.LP
The function takes the following arguments:
.sp
.ne 2
.na
\fB\fIsocket\fR\fR
.ad
.RS 13n
Specifies the socket file descriptor.
.RE

.sp
.ne 2
.na
\fB\fImessage\fR\fR
.ad
.RS 13n
Points to a buffer containing the message to be sent.
.RE

.sp
.ne 2
.na
\fB\fIlength\fR\fR
.ad
.RS 13n
Specifies the size of the message in bytes.
.RE

.sp
.ne 2
.na
\fB\fIflags\fR\fR
.ad
.RS 13n
Specifies the type of message transmission. Values of this argument are formed
by logically OR'ing zero or more of the following flags:
.sp
.ne 2
.na
\fBMSG_EOR\fR
.ad
.RS 11n
Terminates a record (if supported by the protocol)
.RE

.sp
.ne 2
.na
\fBMSG_OOB\fR
.ad
.RS 11n
Sends out-of-band data on sockets that support out-of-band data. The
significance and semantics of out-of-band data are protocol-specific.
.RE

.sp
.ne 2
.na
\fB\fBMSG_NOSIGNAL\fR\fR
.ad
.RS 11n
Don't generate the \fBSIGPIPE\fR signal when a stream-oriented socket is no
longer connected.
.RE

.RE

.sp
.ne 2
.na
\fB\fIdest_addr\fR\fR
.ad
.RS 13n
Points to a \fBsockaddr\fR structure containing the destination address.  The
length and format of the address depend on the address family of the socket.
.RE

.sp
.ne 2
.na
\fB\fIdest_len\fR\fR
.ad
.RS 13n
Specifies the length of the \fBsockaddr\fR structure pointed to by the
\fIdest_addr\fR argument.
.RE

.SH USAGE
.LP
The \fBselect\fR(3C) and \fBpoll\fR(2) functions can be used to determine when
it is possible to send more data.
.SH RETURN VALUES
.LP
Upon successful completion, \fBsendto()\fR returns the number of bytes sent.
Otherwise, \fB-1\fR is returned and \fBerrno\fR is set to indicate the error.
.SH ERRORS
.LP
The \fBsendto()\fR function will fail if:
.sp
.ne 2
.na
\fB\fBEAFNOSUPPORT\fR\fR
.ad
.RS 16n
Addresses in the specified address family cannot be used with this socket.
.RE

.sp
.ne 2
.na
\fB\fBEAGAIN\fR\fR
.ad
.br
.na
\fB\fBEWOULDBLOCK\fR\fR
.ad
.RS 16n
The socket's file descriptor is marked \fBO_NONBLOCK\fR and the requested
operation would block.
.RE

.sp
.ne 2
.na
\fB\fBEBADF\fR\fR
.ad
.RS 16n
The \fIsocket\fR argument is not a valid file descriptor.
.RE

.sp
.ne 2
.na
\fB\fBECONNRESET\fR\fR
.ad
.RS 16n
A connection was forcibly closed by a peer.
.RE

.sp
.ne 2
.na
\fB\fBEFAULT\fR\fR
.ad
.RS 16n
The  \fImessage\fR or  \fIdestaddr\fR parameter cannot be accessed.
.RE

.sp
.ne 2
.na
\fB\fBEINTR\fR\fR
.ad
.RS 16n
A signal interrupted \fBsendto()\fR before any data was transmitted.
.RE

.sp
.ne 2
.na
\fB\fBEMSGSIZE\fR\fR
.ad
.RS 16n
The message is too large to be sent all at once, as the socket requires.
.RE

.sp
.ne 2
.na
\fB\fBENOTCONN\fR\fR
.ad
.RS 16n
The socket is connection-mode but is not connected.
.RE

.sp
.ne 2
.na
\fB\fBENOTSOCK\fR\fR
.ad
.RS 16n
The \fIsocket\fR argument does not refer to a socket.
.RE

.sp
.ne 2
.na
\fB\fBEOPNOTSUPP\fR\fR
.ad
.RS 16n
The \fIsocket\fR argument is associated with a socket that does not support one
or more of the values set in \fIflags\fR.
.RE

.sp
.ne 2
.na
\fB\fBEPIPE\fR\fR
.ad
.RS 16n
The socket is shut down for writing, or the socket is connection-mode and is no
longer connected. In the latter case, and if the socket is of type
\fBSOCK_STREAM\fR, the \fBSIGPIPE\fR signal is generated to the calling thread
unless the \fBMSG_NOSIGNAL\fR flag is set.
.RE

.sp
.LP
If the address family of the socket is \fBAF_UNIX\fR, then \fBsendto()\fR will
fail if:
.sp
.ne 2
.na
\fB\fBEIO\fR\fR
.ad
.RS 16n
An I/O error occurred while reading from or writing to the file system.
.RE

.sp
.ne 2
.na
\fB\fBELOOP\fR\fR
.ad
.RS 16n
Too many symbolic links were encountered in translating the pathname in the
socket address.
.RE

.sp
.ne 2
.na
\fB\fBENAMETOOLONG\fR\fR
.ad
.RS 16n
A component of a pathname exceeded \fINAME_MAX\fR characters, or an entire
pathname exceeded \fIPATH_MAX\fR characters.
.RE

.sp
.ne 2
.na
\fB\fBENOENT\fR\fR
.ad
.RS 16n
A component of the pathname does not name an existing file or the pathname is
an empty string.
.RE

.sp
.ne 2
.na
\fB\fBENOTDIR\fR\fR
.ad
.RS 16n
A component of the path prefix of the pathname in the socket address is not a
directory.
.RE

.sp
.LP
The \fBsendto()\fR function may fail if:
.sp
.ne 2
.na
\fB\fBEACCES\fR\fR
.ad
.RS 16n
Search permission is denied for a component of the path prefix; or write access
to the named socket is denied.
.RE

.sp
.ne 2
.na
\fB\fBEDESTADDRREQ\fR\fR
.ad
.RS 16n
The socket is not connection-mode and does not have its peer address set, and
no destination address was specified.
.RE

.sp
.ne 2
.na
\fB\fBEHOSTUNREACH\fR\fR
.ad
.RS 16n
The destination host cannot be reached (probably because the host is down or a
remote router cannot reach it).
.RE

.sp
.ne 2
.na
\fB\fBEINVAL\fR\fR
.ad
.RS 16n
The \fIdest_len\fR argument is not a valid length for the address family.
.RE

.sp
.ne 2
.na
\fB\fBEIO\fR\fR
.ad
.RS 16n
An I/O error occurred while reading from or writing to the file system.
.RE

.sp
.ne 2
.na
\fB\fBEISCONN\fR\fR
.ad
.RS 16n
A destination address was specified and the socket is already connected.
.RE

.sp
.ne 2
.na
\fB\fBENETDOWN\fR\fR
.ad
.RS 16n
The local interface used to reach the destination is down.
.RE

.sp
.ne 2
.na
\fB\fBENETUNREACH\fR\fR
.ad
.RS 16n
No route to the network is present.
.RE

.sp
.ne 2
.na
\fB\fBENOBUFS\fR\fR
.ad
.RS 16n
Insufficient resources were available in the system to perform the operation.
.RE

.sp
.ne 2
.na
\fB\fBENOMEM\fR\fR
.ad
.RS 16n
Insufficient memory was available to fulfill the request.
.RE

.sp
.ne 2
.na
\fB\fBENOSR\fR\fR
.ad
.RS 16n
There were insufficient STREAMS resources available for the operation to
complete.
.RE

.sp
.LP
If the address family of the socket is \fBAF_UNIX\fR, then \fBsendto()\fR may
fail if:
.sp
.ne 2
.na
\fB\fBENAMETOOLONG\fR\fR
.ad
.RS 16n
Pathname resolution of a symbolic link produced an intermediate result whose
length exceeds \fIPATH_MAX\fR.
.RE

.SH ATTRIBUTES
.LP
See \fBattributes\fR(5) for descriptions of the following attributes:
.sp

.sp
.TS
box;
c | c
l | l .
ATTRIBUTE TYPE	ATTRIBUTE VALUE
_
Interface Stability	Standard
_
MT-Level	MT-Safe
.TE

.SH SEE ALSO
.LP
\fBpoll\fR(2), \fBsockaddr\fR(3SOCKET),
\fBgetsockopt\fR(3XNET), \fBrecv\fR(3XNET),
\fBrecvfrom\fR(3XNET), \fBrecvmsg\fR(3XNET), \fBselect\fR(3C),
\fBsend\fR(3XNET), \fBsendmsg\fR(3XNET), \fBsetsockopt\fR(3XNET),
\fBshutdown\fR(3XNET), \fBsocket\fR(3XNET), \fBattributes\fR(5),
\fBstandards\fR(5)
