.\"
.\" Sun Microsystems, Inc. gratefully acknowledges The Open Group for
.\" permission to reproduce portions of its copyrighted documentation.
.\" Original documentation from The Open Group can be obtained online at
.\" http://www.opengroup.org/bookstore/.
.\"
.\" The Institute of Electrical and Electronics Engineers and The Open
.\" Group, have given us permission to reprint portions of their
.\" documentation.
.\"
.\" In the following statement, the phrase ``this text'' refers to portions
.\" of the system documentation.
.\"
.\" Portions of this text are reprinted and reproduced in electronic form
.\" in the SunOS Reference Manual, from IEEE Std 1003.1, 2004 Edition,
.\" Standard for Information Technology -- Portable Operating System
.\" Interface (POSIX), The Open Group Base Specifications Issue 6,
.\" Copyright (C) 2001-2004 by the Institute of Electrical and Electronics
.\" Engineers, Inc and The Open Group.  In the event of any discrepancy
.\" between these versions and the original IEEE and The Open Group
.\" Standard, the original IEEE and The Open Group Standard is the referee
.\" document.  The original Standard can be obtained online at
.\" http://www.opengroup.org/unix/online.html.
.\"
.\" This notice shall appear on any product containing this material.
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\"
.\" Copyright (c) 1992, X/Open Company Limited.  All Rights Reserved.
.\" Portions Copyright (c) 2003, Sun Microsystems, Inc.  All Rights Reserved
.\"
.TH ACCEPT 3XNET "Nov 1, 2003"
.SH NAME
accept \- accept a new connection on a socket
.SH SYNOPSIS
.LP
.nf
\fBcc\fR [ \fIflag\fR ... ] \fIfile\fR ... \fB-lxnet\fR [ \fIlibrary\fR ... ]
#include <sys/socket.h>


\fBint\fR \fBaccept\fR(\fBint\fR \fIsocket\fR, \fBstruct sockaddr *restrict\fR \fIaddress\fR,
     \fBsocklen_t *restrict\fR \fIaddress_len\fR);
.fi

.SH DESCRIPTION
.LP
The \fBaccept()\fR function extracts the first connection on the queue of
pending connections, creates a new socket with the same socket type protocol
and address family as the specified socket, and allocates a new file descriptor
for that socket.
.sp
.LP
The function takes the following arguments:
.sp
.ne 2
.na
\fB\fIsocket\fR\fR
.ad
.RS 15n
Specifies a socket that was created with \fBsocket\fR(3XNET), has been bound to
an address with \fBbind\fR(3XNET), and has issued a successful call to
\fBlisten\fR(3XNET).
.RE

.sp
.ne 2
.na
\fB\fIaddress\fR\fR
.ad
.RS 15n
Either a null pointer, or a pointer to a \fBsockaddr\fR structure where the
address of the connecting socket will be returned.
.RE

.sp
.ne 2
.na
\fB\fIaddress_len\fR\fR
.ad
.RS 15n
Points to a \fBsocklen_t\fR which on input specifies the length of the supplied
\fBsockaddr\fR structure, and on output specifies the length of the stored
address.
.RE

.sp
.LP
If \fIaddress\fR is not a null pointer, the address of the peer for the
accepted connection is stored in the \fBsockaddr\fR structure pointed to by
\fIaddress\fR, and the length of this address is stored in the object pointed
to by \fIaddress_len\fR.
.sp
.LP
If the actual length of the address is greater than the length of the supplied
\fBsockaddr\fR structure, the stored address will be truncated.
.sp
.LP
If the protocol permits connections by unbound clients, and the peer is not
bound, then the value stored in the object pointed to by \fIaddress\fR is
unspecified.
.sp
.LP
If the listen queue is empty of connection requests and O_NONBLOCK is not set
on the file descriptor for the socket, \fBaccept()\fR will block until a
connection is present. If the \fBlisten\fR(3XNET) queue is empty of connection
requests and O_NONBLOCK is set on the file descriptor for the socket,
\fBaccept()\fR will fail and set \fBerrno\fR to \fBEAGAIN\fR or
\fBEWOULDBLOCK\fR.
.sp
.LP
The accepted socket cannot itself accept more connections.  The original socket
remains open and can accept more connections.
.SH USAGE
.LP
When a connection is available, \fBselect\fR(3C) will indicate that the file
descriptor for the socket is ready for reading.
.SH RETURN VALUES
.LP
Upon successful completion, \fBaccept()\fR returns the nonnegative file
descriptor of the accepted socket.  Otherwise, \(mi1 is returned and
\fBerrno\fR is set to indicate the error.
.SH ERRORS
.LP
The \fBaccept()\fR function will fail if:
.sp
.ne 2
.na
\fB\fBEAGAIN\fR\fR
.ad
.br
.na
\fB\fBEWOULDBLOCK\fR\fR
.ad
.RS 16n
O_NONBLOCK is set for the socket file descriptor and no connections are present
to be accepted.
.RE

.sp
.ne 2
.na
\fB\fBEBADF\fR\fR
.ad
.RS 16n
The \fIsocket\fR argument is not a valid file descriptor.
.RE

.sp
.ne 2
.na
\fB\fBECONNABORTED\fR\fR
.ad
.RS 16n
A connection has been aborted.
.RE

.sp
.ne 2
.na
\fB\fBEFAULT\fR\fR
.ad
.RS 16n
The  \fIaddress\fR or  \fIaddress_len\fR parameter can not be accessed or
written.
.RE

.sp
.ne 2
.na
\fB\fBEINTR\fR\fR
.ad
.RS 16n
The \fBaccept()\fR function was interrupted by a signal that was caught before
a valid connection arrived.
.RE

.sp
.ne 2
.na
\fB\fBEINVAL\fR\fR
.ad
.RS 16n
The \fIsocket\fR is not accepting connections.
.RE

.sp
.ne 2
.na
\fB\fBEMFILE\fR\fR
.ad
.RS 16n
\fBOPEN_MAX\fR file descriptors are currently open in the calling process.
.RE

.sp
.ne 2
.na
\fB\fBENFILE\fR\fR
.ad
.RS 16n
The maximum number of file descriptors in the system are already open.
.RE

.sp
.ne 2
.na
\fB\fBENOTSOCK\fR\fR
.ad
.RS 16n
The \fIsocket\fR argument does not refer to a socket.
.RE

.sp
.ne 2
.na
\fB\fBEOPNOTSUPP\fR\fR
.ad
.RS 16n
The socket type of the specified socket does not support accepting connections.
.RE

.sp
.LP
The \fBaccept()\fR function may fail if:
.sp
.ne 2
.na
\fB\fBENOBUFS\fR\fR
.ad
.RS 11n
No buffer space is available.
.RE

.sp
.ne 2
.na
\fB\fBENOMEM\fR\fR
.ad
.RS 11n
There was insufficient memory available to complete the operation.
.RE

.sp
.ne 2
.na
\fB\fBENOSR\fR\fR
.ad
.RS 11n
There was insufficient STREAMS resources available to complete the operation.
.RE

.sp
.ne 2
.na
\fB\fBEPROTO\fR\fR
.ad
.RS 11n
A protocol error has occurred; for example, the STREAMS protocol stack has not
been initialized.
.RE

.SH ATTRIBUTES
.LP
See \fBattributes\fR(5) for descriptions of the following attributes:
.sp

.sp
.TS
box;
c | c
l | l .
ATTRIBUTE TYPE	ATTRIBUTE VALUE
_
Interface Stability	Standard
_
MT-Level	MT-Safe
.TE

.SH SEE ALSO
.LP
\fBsockaddr\fR(3SOCKET),
\fBbind\fR(3XNET), \fBconnect\fR(3XNET), \fBlisten\fR(3XNET),
\fBsocket\fR(3XNET), \fBattributes\fR(5), \fBstandards\fR(5)
