'\" te
.\" Copyright (c) 2007, Sun Microsystems, Inc.,  All Rights Reserved
.\" The contents of this file are subject to the terms of the Common Development and Distribution License (the "License").  You may not use this file except in compliance with the License.
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE or http://www.opensolaris.org/os/licensing.  See the License for the specific language governing permissions and limitations under the License.
.\" When distributing Covered Code, include this CDDL HEADER in each file and include the License file at usr/src/OPENSOLARIS.LICENSE.  If applicable, add the following below this CDDL HEADER, with the fields enclosed by brackets "[]" replaced with your own identifying information: Portions Copyright [yyyy] [name of copyright owner]
.TH LDI_ADD_EVENT_HANDLER 9F "April 9, 2016"
.SH NAME
ldi_add_event_handler \- add NDI event service callback handler
.SH SYNOPSIS
.LP
.nf
#include <sys/ddi_obsolete.h>

\fBint\fR \fBldi_add_event_handler\fR(\fBldi_handle_t\fR \fIlh\fR, \fIddi_eventcookie_t ec\fR,
     \fBvoid (*handler)(\fR\fIldi_handle_t\fR, \fIddi_eventcookie_t\fR,
     \fBvoid *, void *) void *arg,\fR \fIldi_callback_id_t *id\fR);
.fi

.SH INTERFACE LEVEL
.LP
Obsolete
.SH PARAMETERS
.ne 2
.na
\fB\fIldi_handle_t lh\fR\fR
.ad
.sp .6
.RS 4n
Layered handle representing event notification device.
.RE

.sp
.ne 2
.na
\fB\fIddi_eventcookie_t ec\fR\fR
.ad
.sp .6
.RS 4n
Cookie returned from call to \fBldi_get_eventcookie\fR(9F).
.RE

.sp
.ne 2
.na
\fB\fIvoid (*handler)(ldi_handle_t, ddi_eventcookie_t, void *, void *)\fR\fR
.ad
.sp .6
.RS 4n
Callback handler for NDI event service notification.
.RE

.sp
.ne 2
.na
\fB\fIvoid *arg\fR\fR
.ad
.sp .6
.RS 4n
Pointer to opaque data supplied by caller. Typically, this is a pointer to the
layered driver's softstate structure.
.RE

.sp
.ne 2
.na
\fB\fIldi_callback_id_t *id\fR\fR
.ad
.sp .6
.RS 4n
Pointer to registration id, where a unique registration id is returned.
Registration id must be saved and used when calling
\fBldi_remove_event_handler\fR(9F) to unregister a callback handler.
.RE

.SH DESCRIPTION
.LP
This function is obsolete and is only maintained for compatibility. Use of this
function is strongly discouraged. For equivalent functionality provided by new
interfaces, see \fBldi_ev_get_cookie\fR(9F) and
\fBldi_ev_register_callbacks\fR(9F).
.sp
.LP
The \fBldi_add_event_handler()\fR function adds a callback handler to be
invoked at the occurrence of the event specified by the cookie. Adding a
callback handler is also known as subscribing to an event. Upon successful
subscription, the handler is invoked when the event occurs. You can unregister
the handler by using \fBldi_remove_event_handler\fR(9F).
.sp
.LP
An instance of a layered driver can register multiple handlers for an event or
a single handler for multiple events. Callback order is not defined and should
be assumed to be random.
.sp
.LP
The routine handler is invoked with the following arguments:
.sp
.ne 2
.na
\fB\fBldi_handle_t\fR \fIlh\fR\fR
.ad
.RS 24n
Layered handle representing the device for which the event notification is
requested.
.RE

.sp
.ne 2
.na
\fB\fBddi_eventcookie_t\fR \fIec\fR\fR
.ad
.RS 24n
Structure describing event that occurred.
.RE

.sp
.ne 2
.na
\fB\fBvoid *\fR\fIarg\fR\fR
.ad
.RS 24n
Opaque data pointer provided by the driver during callback registration.
.RE

.sp
.ne 2
.na
\fB\fBvoid *\fR\fIimpl_data\fR\fR
.ad
.RS 24n
Pointer to event specific data defined by the framework that invokes the
callback function.
.RE

.SH RETURN VALUES
.ne 2
.na
\fB\fBDDI_SUCCESS\fR\fR
.ad
.RS 15n
Callback handler registered successfully.
.RE

.sp
.ne 2
.na
\fB\fBDDI_FAILURE\fR\fR
.ad
.RS 15n
Failed to register callback handler. Possible reasons include lack of resources
or a bad cookie.
.RE

.SH CONTEXT
.LP
The \fBldi_add_event_handler()\fR function can be called from user and kernel
contexts only.
.SH SEE ALSO
.LP
\fBldi_ev_get_cookie\fR(9F), \fBldi_ev_register_callbacks\fR(9F),
\fBldi_get_eventcookie\fR(9F), \fBldi_remove_event_handler\fR(9F)
.sp
.LP
\fIWriting Device Drivers\fR
.SH NOTES
.LP
Layered drivers must remove all registered callback handlers for a device
instance, represented by the layered handle, by calling
\fBldi_remove_event_handler\fR(9F) before the layered driver's \fBdetach(9E)\fR
routine completes.
