'\" te
.\" Copyright (c) 2004, Sun Microsystems, Inc., All Rights Reserved
.\" The contents of this file are subject to the terms of the Common Development and Distribution License (the "License").  You may not use this file except in compliance with the License.
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE or http://www.opensolaris.org/os/licensing.  See the License for the specific language governing permissions and limitations under the License.
.\" When distributing Covered Code, include this CDDL HEADER in each file and include the License file at usr/src/OPENSOLARIS.LICENSE.  If applicable, add the following below this CDDL HEADER, with the fields enclosed by brackets "[]" replaced with your own identifying information: Portions Copyright [yyyy] [name of copyright owner]
.TH USB_PARSE_DATA 9F "Oct 30, 2016"
.SH NAME
usb_parse_data \- Tokenize and align the bytes of raw variable-format data
.SH SYNOPSIS
.LP
.nf
#include <sys/usb/usba.h>



\fBsize_t\fR \fBusb_parse_data\fR(\fBchar *\fR\fIformat\fR, \fBuchar_t *\fR\fIdata\fR,
     \fBsize_t\fR \fIdatalen\fR, \fBvoid *\fR\fIstructure\fR, \fBsize_t\fR \fIstructlen\fR);
.fi

.SH INTERFACE LEVEL
.LP
Solaris DDI specific (Solaris DDI)
.SH PARAMETERS
.ne 2
.na
\fB\fIformat\fR\fR
.ad
.RS 13n
Null terminated string describing the format of the data structure for
general-purpose byte swapping. The letters "c," "s," "l," and "L" represent 1,
2, 4 and 8 byte quantities, respectively. A descriptor that consists of a short
and two bytes would be described by "scc." A number preceding a letter serves
as a multiplier of that letter. A format equivalent to "scc" is "s2c."
.RE

.sp
.ne 2
.na
\fB\fIdata\fR\fR
.ad
.RS 13n
Raw descriptor data to parse.
.RE

.sp
.ne 2
.na
\fB\fIdatalen\fR\fR
.ad
.RS 13n
Length, in bytes, of the raw descriptor data buffer.
.RE

.sp
.ne 2
.na
\fB\fIstructure\fR\fR
.ad
.RS 13n
Destination data buffer where parsed data is returned.
.RE

.sp
.ne 2
.na
\fB\fIstructlen\fR\fR
.ad
.RS 13n
Length, in bytes, of the destination data buffer. Parsed result length will not
exceed this value.
.RE

.SH DESCRIPTION
.LP
The \fBusb_parse_data\fR function parses data such as a variable-format class-
or vendor-specific descriptor. The function also tokenizes and aligns the bytes
of raw descriptor data into fields of a variable-format descriptor.
.sp
.LP
While the USBA framework can parse the endpoint, interface, configuration, and
string descriptors defined by the \fIUSB 3.0\fR specification, the format of
class- or vendor-specific descriptors cannot be explicitly defined by the
specification and will be unique for each. The \fIformat\fR argument defines
how to parse such a descriptor.
.sp
.LP
While the USB specification defines bit ordering as little-endian, this routine
(like the entire API), converts the data to the endianness of the host.
.sp
.LP
The \fIstructlen\fR parameter defines the size of the destination data buffer.
Data is truncated to this size if the destination data buffer is too small.
.SH RETURN VALUES
.LP
On success: Returns the size (in bytes) of the parsed data result.
.sp
.LP
On failure: Returns 0. (Same as USB_PARSE_ERROR).
.SH CONTEXT
.LP
May be called from user, kernel or interrupt context.
.SH EXAMPLES
.in +2
.nf
  /*
   * Parse raw descriptor data in buf, putting result into ret_descr.
   * ret_buf_len holds the size of ret_descr buf;  routine returns
   * number of resulting bytes.
   *
   * Descriptor being parsed has 2 chars, followed by one short,
   * 3 chars and one more short.
   */
  size_t size_of_returned_descr;
  xxx_descr_t ret_descr;

   size_of_returned_descr = usb_parse_data("ccscccs",
      buf, sizeof(buf), (void *)ret_descr, (sizeof)xxx_descr_t));
  if (size_of_returned_descr < (sizeof (xxx_descr_t))) {
           /* Data truncated. */
  }

  or:

  size_of_returned_descr = usb_parse_data("2cs3cs",
      buf, sizeof(buf), (void *)ret_descr, (sizeof)xxx_descr_t));
  if (size_of_returned_descr < (sizeof (xxx_descr_t))) {
          /* Data truncated. */
  }
.fi
.in -2

.SH ATTRIBUTES
.LP
See \fBattributes\fR(5) for descriptions of the following attributes:
.sp

.sp
.TS
box;
c | c
l | l .
ATTRIBUTE TYPE	ATTRIBUTE VALUE
_
Architecture	PCI-based systems
_
Interface stability	Committed
.TE

.SH SEE ALSO
.LP
\fBattributes\fR(5), \fBusb_get_dev_data\fR(9F),
\fBusb_get_string_descr\fR(9F), \fBusb_get_cfg\fR(9F)
