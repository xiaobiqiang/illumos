.\"
.\" Sun Microsystems, Inc. gratefully acknowledges The Open Group for
.\" permission to reproduce portions of its copyrighted documentation.
.\" Original documentation from The Open Group can be obtained online at
.\" http://www.opengroup.org/bookstore/.
.\"
.\" The Institute of Electrical and Electronics Engineers and The Open
.\" Group, have given us permission to reprint portions of their
.\" documentation.
.\"
.\" In the following statement, the phrase ``this text'' refers to portions
.\" of the system documentation.
.\"
.\" Portions of this text are reprinted and reproduced in electronic form
.\" in the SunOS Reference Manual, from IEEE Std 1003.1, 2004 Edition,
.\" Standard for Information Technology -- Portable Operating System
.\" Interface (POSIX), The Open Group Base Specifications Issue 6,
.\" Copyright (C) 2001-2004 by the Institute of Electrical and Electronics
.\" Engineers, Inc and The Open Group.  In the event of any discrepancy
.\" between these versions and the original IEEE and The Open Group
.\" Standard, the original IEEE and The Open Group Standard is the referee
.\" document.  The original Standard can be obtained online at
.\" http://www.opengroup.org/unix/online.html.
.\"
.\" This notice shall appear on any product containing this material.
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\"
.\" Portions Copyright (c) 1992, X/Open Company Limited.  All Rights Reserved.
.\" Copyright (c) 2003, Sun Microsystems, Inc. All Rights Reserved.
.\"
.TH FGETC 3C "Oct 15, 2003"
.SH NAME
fgetc, getc, getc_unlocked, getchar, getchar_unlocked, getw \- get a byte from
a stream
.SH SYNOPSIS
.LP
.nf
#include <stdio.h>

\fBint\fR \fBfgetc\fR(\fBFILE *\fR\fIstream\fR);
.fi

.LP
.nf
\fBint\fR \fBgetc\fR(\fBFILE *\fR\fIstream\fR);
.fi

.LP
.nf
\fBint\fR \fBgetc_unlocked\fR(\fBFILE *\fR\fIstream\fR);
.fi

.LP
.nf
\fBint\fR \fBgetchar\fR(\fBvoid\fR);
.fi

.LP
.nf
\fBint\fR \fBgetchar_unlocked\fR(\fBvoid\fR);
.fi

.LP
.nf
\fBint\fR \fBgetw\fR(\fBFILE *\fR\fIstream\fR);
.fi

.SH DESCRIPTION
.sp
.LP
The \fBfgetc()\fR function obtains the next byte (if present) as an \fBunsigned
char\fR converted to an \fBint\fR, from the input stream pointed to by
\fIstream\fR, and advances the associated file position indicator for the
stream (if defined).
.sp
.LP
For standard-conforming (see \fBstandards\fR(5)) applications, if the
end-of-file indicator for the stream is set, \fBfgetc()\fR returns \fBEOF\fR
whether or not a next byte is present.
.sp
.LP
The \fBfgetc()\fR function may mark the \fBst_atime\fR field of the file
associated with \fIstream\fR for update. The \fBst_atime\fR field will be
marked for update by the first successful execution of \fBfgetc()\fR,
\fBfgets\fR(3C), \fBfread\fR(3C), \fBfscanf\fR(3C), \fBgetc()\fR,
\fBgetchar()\fR, \fBgets\fR(3C) or \fBscanf\fR(3C) using \fIstream\fR that
returns data not supplied by a prior call to \fBungetc\fR(3C) or
\fBungetwc\fR(3C).
.sp
.LP
The \fBgetc()\fR function is functionally identical to \fBfgetc()\fR, except
that it is implemented as a macro. It runs faster than \fBfgetc()\fR, but it
takes up more space per invocation and its name cannot be passed as an argument
to a function call.
.sp
.LP
The \fBgetchar()\fR routine is equivalent to \fBgetc(stdin)\fR. It is
implemented as a macro.
.sp
.LP
The \fBgetc_unlocked()\fR and \fBgetchar_unlocked()\fR routines are variants of
\fBgetc()\fR and \fBgetchar()\fR, respectively, that do not lock the stream.
It is the caller's responsibility to acquire the stream lock before calling
these routines and releasing the lock afterwards; see \fBflockfile\fR(3C) and
\fBstdio\fR(3C). These routines are implemented as macros.
.sp
.LP
The \fBgetw()\fR function reads the next word from the \fIstream\fR. The size
of a word is the size of an \fBint\fR and may vary from environment to
environment.  The \fBgetw()\fR function presumes no special alignment in the
file.
.sp
.LP
The \fBgetw()\fR function may mark the \fBst_atime\fR field of the file
associated with \fIstream\fR for update. The \fBst_atime\fR field will be
marked for update by the first successful execution of \fBfgetc()\fR,
\fBfgets\fR(3C), \fBfread\fR(3C), \fBgetc()\fR, \fBgetchar()\fR,
\fBgets\fR(3C), \fBfscanf\fR(3C) or \fBscanf\fR(3C) using \fIstream\fR that
returns data not supplied by a prior call to \fBungetc\fR(3C).
.SH RETURN VALUES
.sp
.LP
Upon successful completion, \fBfgetc()\fR, \fBgetc()\fR, \fBgetc_unlocked()\fR,
\fBgetchar()\fR, \fBgetchar_unlocked()\fR, and \fBgetw()\fR return the next
byte from the input stream pointed to by \fIstream\fR. If the stream is at
end-of-file, the end-of-file indicator for the stream is set and these
functions return \fBEOF\fR. For standard-conforming (see \fBstandards\fR(5))
applications, if the end-of-file indicator for the stream is set, these
functions return \fBEOF\fR whether or not the stream is at end-of-file. If a
read error occurs, the error indicator for the stream is set, \fBEOF\fR is
returned, and \fBerrno\fR is set to indicate the error.
.SH ERRORS
.sp
.LP
The \fBfgetc()\fR, \fBgetc()\fR, \fBgetc_unlocked()\fR, \fBgetchar()\fR,
\fBgetchar_unlocked()\fR, and \fBgetw()\fR functions will fail if data needs to
be read and:
.sp
.ne 2
.na
\fB\fBEAGAIN\fR\fR
.ad
.RS 13n
The \fBO_NONBLOCK\fR flag is set for the file descriptor underlying
\fIstream\fR and the process would be delayed in the \fBfgetc()\fR operation.
.RE

.sp
.ne 2
.na
\fB\fBEBADF\fR\fR
.ad
.RS 13n
The file descriptor underlying \fIstream\fR is not a valid file descriptor open
for reading.
.RE

.sp
.ne 2
.na
\fB\fBEINTR\fR\fR
.ad
.RS 13n
The read operation was terminated due to the receipt of a signal, and no data
was transferred.
.RE

.sp
.ne 2
.na
\fB\fBEIO\fR\fR
.ad
.RS 13n
A physical I/O error has occurred, or the process is in a background process
group attempting to read from its controlling terminal, and either the process
is ignoring or blocking the \fBSIGTTIN\fR signal or the process group is
orphaned. This error may also be generated for implementation-dependent
reasons.
.RE

.sp
.ne 2
.na
\fB\fBEOVERFLOW\fR\fR
.ad
.RS 13n
The file is a regular file and an attempt was made to read at or beyond the
offset maximum associated with the corresponding stream.
.RE

.sp
.LP
The \fBfgetc()\fR, \fBgetc()\fR, \fBgetc_unlocked()\fR, \fBgetchar()\fR,
\fBgetchar_unlocked()\fR, and \fBgetw()\fR functions may fail if:
.sp
.ne 2
.na
\fB\fBENOMEM\fR\fR
.ad
.RS 10n
Insufficient storage space is available.
.RE

.sp
.ne 2
.na
\fB\fBENXIO\fR\fR
.ad
.RS 10n
A request was made of a non-existent device, or the request was outside the
capabilities of the device.
.RE

.SH USAGE
.sp
.LP
If the integer value returned by \fBfgetc()\fR, \fBgetc()\fR,
\fBgetc_unlocked()\fR, \fBgetchar()\fR, \fBgetchar_unlocked()\fR, and
\fBgetw()\fR is stored into a variable of type \fBchar\fR and then compared
against the integer constant EOF, the comparison may never succeed, because
sign-extension of a variable of type \fBchar\fR on widening to integer is
implementation-dependent.
.sp
.LP
The \fBferror\fR(3C) or \fBfeof\fR(3C) functions must be used to distinguish
between an error condition and an end-of-file condition.
.sp
.LP
Functions exist for the \fBgetc()\fR, \fBgetc_unlocked()\fR, \fBgetchar()\fR,
and \fBgetchar_unlocked()\fR macros. To get the function form, the macro name
must be undefined (for example, \fB#undef getc\fR).
.sp
.LP
When the macro forms are used, \fBgetc()\fR and \fBgetc_unlocked()\fR evaluate
the \fIstream\fR argument more than once. In particular,
\fBgetc(*\fR\fIf++\fR\fB);\fR does not work sensibly.  The \fBfgetc()\fR
function should be used instead when evaluating the \fIstream\fR argument has
side effects.
.sp
.LP
Because of possible differences in word length and byte ordering, files written
using \fBgetw()\fR are machine-dependent, and may not be read using
\fBgetw()\fR on a different processor.
.sp
.LP
The \fBgetw()\fR function is inherently byte stream-oriented and is not tenable
in the context of either multibyte character streams or wide-character streams.
Application programmers are recommended to use one of the character-based input
functions instead.
.SH ATTRIBUTES
.sp
.LP
See \fBattributes\fR(5) for descriptions of the following attributes:
.sp

.sp
.TS
box;
c | c
l | l .
ATTRIBUTE TYPE	ATTRIBUTE VALUE
_
Interface Stability	T{
\fBfgetc()\fR, \fBgetc()\fR, \fBgetc_unlocked()\fR, \fBgetchar()\fR, and \fBgetchar_unlocked()\fR are Standard.
T}
_
MT-Level	See \fBNOTES\fR below.
.TE

.SH SEE ALSO
.sp
.LP
\fBIntro\fR(3), \fB__fsetlocking\fR(3C), \fBfclose\fR(3C), \fBfeof\fR(3C),
\fBfgets\fR(3C), \fBfgetwc\fR(3C), \fBfgetws\fR(3C), \fBflockfile\fR(3C),
\fBfopen\fR(3C), \fBfread\fR(3C), \fBfscanf\fR(3C), \fBgets\fR(3C),
\fBputc\fR(3C), \fBscanf\fR(3C), \fBstdio\fR(3C), \fBungetc\fR(3C),
\fBungetwc\fR(3C), \fBattributes\fR(5), \fBstandards\fR(5)
.SH NOTES
.sp
.LP
The \fBfgetc()\fR, \fBgetc()\fR, \fBgetchar()\fR, and \fBgetw()\fR routines are
MT-Safe in multithreaded applications.  The \fBgetc_unlocked()\fR and
\fBgetchar_unlocked()\fR routines are unsafe in multithreaded applications.
