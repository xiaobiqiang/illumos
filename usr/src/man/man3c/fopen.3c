.\"
.\" Sun Microsystems, Inc. gratefully acknowledges The Open Group for
.\" permission to reproduce portions of its copyrighted documentation.
.\" Original documentation from The Open Group can be obtained online at
.\" http://www.opengroup.org/bookstore/.
.\"
.\" The Institute of Electrical and Electronics Engineers and The Open
.\" Group, have given us permission to reprint portions of their
.\" documentation.
.\"
.\" In the following statement, the phrase ``this text'' refers to portions
.\" of the system documentation.
.\"
.\" Portions of this text are reprinted and reproduced in electronic form
.\" in the SunOS Reference Manual, from IEEE Std 1003.1, 2004 Edition,
.\" Standard for Information Technology -- Portable Operating System
.\" Interface (POSIX), The Open Group Base Specifications Issue 6,
.\" Copyright (C) 2001-2004 by the Institute of Electrical and Electronics
.\" Engineers, Inc and The Open Group.  In the event of any discrepancy
.\" between these versions and the original IEEE and The Open Group
.\" Standard, the original IEEE and The Open Group Standard is the referee
.\" document.  The original Standard can be obtained online at
.\" http://www.opengroup.org/unix/online.html.
.\"
.\" This notice shall appear on any product containing this material.
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\"
.\" Copyright 1989 AT&T.
.\" Portions Copyright (c) 1992, X/Open Company Limited.  All Rights Reserved.
.\" Copyright (c) 2006, Sun Microsystems, Inc.  All Rights Reserved.
.\" Portions Copyright (c) 2013, OmniTI Computer Consulting, Inc.
.\" All Rights Reserved.
.\" Portions Copyright (c) 2014, Joyent, Inc.  All Rights Reserved.
.\" Copyright 2014 Nexenta Systems, Inc.  All rights reserved.
.\"
.TH FOPEN 3C "Nov 24, 2014"
.SH NAME
fopen \- open a stream
.SH SYNOPSIS
.LP
.nf
#include <stdio.h>

\fBFILE *\fR\fBfopen\fR(\fBconst char *\fR\fIfilename\fR, \fBconst char *\fR\fImode\fR);
.fi

.SH DESCRIPTION
.LP
The \fBfopen()\fR function opens the file whose pathname is the string pointed
to by \fIfilename\fR, and associates a stream with it.
.sp
.LP
The argument \fImode\fR points to a string beginning with one of the following
base sequences:
.sp
.ne 2
.na
\fB\fBr\fR\fR
.ad
.RS 20n
Open file for reading.
.RE

.sp
.ne 2
.na
\fB\fBw\fR\fR
.ad
.RS 20n
Truncate to  zero  length or create file for writing.
.RE

.sp
.ne 2
.na
\fB\fBa\fR\fR
.ad
.RS 20n
Append; open or create file for writing at end-of-file.
.RE

.sp
.ne 2
.na
\fB\fBr+\fR\fR
.ad
.RS 20n
Open file for update (reading and writing).
.RE

.sp
.ne 2
.na
\fB\fBw+\fR\fR
.ad
.RS 20n
Truncate to zero length or create file for update.
.RE

.sp
.ne 2
.na
\fB\fBa+\fR\fR
.ad
.RS 20n
Append; open or create file for update, writing at end-of-file.
.RE

.sp
.LP
In addition to the base sequences for the \fImode\fR argument above,
three additional flags are supported via the \fBb\fR character, the
\fBe\fR character, and the \fBx\fR character.  Order of these additional
flags (including the \fB+\fR) does not matter.
.sp
.LP
The character \fBb\fR has no effect, but is allowed for ISO C standard
conformance (see \fBstandards\fR(5)). Opening a file with read mode (\fBr\fR as
the first character in the \fImode\fR argument) fails if the file does not
exist or cannot be read.
.sp
.LP
The character \fBe\fR will cause the underlying file descriptor to be
opened with the O_CLOEXEC flag as described in \fBopen\fR(2).
.sp
.LP
The character \fBx\fR will attempt to open the specified file
exclusively. This is the same behavior as opening the underlying file
with the O_EXCL flag as described in \fBopen\fR(2).
.sp
.LP
Opening a file with append mode (\fBa\fR as the first character in the
\fImode\fR argument) causes all subsequent writes to the file to be forced to
the then current end-of-file, regardless of intervening calls to
\fBfseek\fR(3C). If two separate processes open the same file for append, each
process may write freely to the file without fear of destroying output being
written by the other.  The output from the two processes will be intermixed in
the file in the order in which it is written.
.sp
.LP
When a file is opened with update mode (\fB+\fR as the second or third
character in the \fImode\fR argument), both input and output may be performed
on the associated stream. However, output must not be directly followed by
input without an intervening call to \fBfflush\fR(3C) or to a file positioning
function ( \fBfseek\fR(3C), \fBfsetpos\fR(3C) or \fBrewind\fR(3C)), and input
must not be directly followed by output without an intervening call to a file
positioning function, unless the input operation encounters end-of-file.
.sp
.LP
When opened, a stream is fully buffered if and only if it can be determined not
to refer to an interactive device. The error and end-of-file indicators for the
stream are cleared.
.sp
.LP
If \fImode\fR begins with \fBw\fR or \fBa\fR and the file did not previously
exist, upon successful completion, \fBfopen()\fR function will mark for update
the \fBst_atime\fR, \fBst_ctime\fR and \fBst_mtime\fR fields of the file and
the \fBst_ctime\fR and \fBst_mtime\fR fields of the parent directory.
.sp
.LP
If \fImode\fR begins with \fBw\fR and the file did previously exist, upon
successful completion, \fBfopen()\fR will mark for update the \fBst_ctime\fR
and \fBst_mtime\fR fields of the file.  The \fBfopen()\fR function will
allocate a file descriptor as \fBopen\fR(2) does.
.sp
.LP
Normally, 32-bit applications return an \fBEMFILE\fR error when attempting to
associate a stream with a file accessed by a file descriptor with a value
greater than 255. If the last character of \fImode\fR is \fBF\fR, 32-bit
applications will be allowed to associate a stream with a file accessed by a
file descriptor with a value greater than 255. A \fBFILE\fR pointer obtained in
this way must never be used by any code that might directly access fields in
the \fBFILE\fR structure. If the fields in the \fBFILE\fR structure are used
directly by 32-bit applications when the last character of mode is \fBF\fR,
data corruption could occur. See the USAGE section of this manual page and the
\fBenable_extended_FILE_stdio\fR(3C) manual page for other options for enabling
the extended FILE facility.
.sp
.LP
In 64-bit applications, the last character of \fImode\fR is silently ignored if
it is \fBF\fR.  64-bit applications are always allowed to associate a stream
with a file accessed by a file descriptor with any value.
.sp
.LP
The largest value that can be represented correctly in an object of type
\fBoff_t\fR will be established as the offset maximum in the open file
description.
.SH RETURN VALUES
.LP
Upon successful completion, \fBfopen()\fR returns a pointer to the object
controlling the stream.  Otherwise, a null pointer is returned and \fBerrno\fR
is set to indicate the error.
.sp
.LP
The \fBfopen()\fR function may fail and not set \fBerrno\fR if there are no
free \fBstdio\fR streams.
.SH ERRORS
.LP
The \fBfopen()\fR function will fail if:
.sp
.ne 2
.na
\fB\fBEACCES\fR\fR
.ad
.RS 16n
Search permission is denied on a component of the path prefix, or the file
exists and the permissions specified by \fImode\fR are denied, or the file does
not exist and write permission is denied for the parent directory of the file
to be created.
.RE

.sp
.ne 2
.na
\fB\fBEINTR\fR\fR
.ad
.RS 16n
A signal was caught during the execution of \fBfopen()\fR.
.RE

.sp
.ne 2
.na
\fB\fBEISDIR\fR\fR
.ad
.RS 16n
The named file is a directory and \fImode\fR requires write access.
.RE

.sp
.ne 2
.na
\fB\fBELOOP\fR\fR
.ad
.RS 16n
Too many symbolic links were encountered in resolving \fIpath\fR.
.RE

.sp
.ne 2
.na
\fB\fBEMFILE\fR\fR
.ad
.RS 16n
There are {\fBOPEN_MAX\fR} file descriptors currently open in the calling
process.
.RE

.sp
.ne 2
.na
\fB\fBENAMETOOLONG\fR\fR
.ad
.RS 16n
The length of the \fIfilename\fR exceeds \fIPATH_MAX\fR or a pathname component
is longer than \fINAME_MAX\fR.
.RE

.sp
.ne 2
.na
\fB\fBENFILE\fR\fR
.ad
.RS 16n
The maximum allowable number of files is currently open in the system.
.RE

.sp
.ne 2
.na
\fB\fBENOENT\fR\fR
.ad
.RS 16n
A component of \fIfilename\fR does not name an existing file or \fIfilename\fR
is an empty string.
.RE

.sp
.ne 2
.na
\fB\fBENOSPC\fR\fR
.ad
.RS 16n
The directory or file system that would contain the new file cannot be
expanded, the file does not exist, and it was to be created.
.RE

.sp
.ne 2
.na
\fB\fBENOTDIR\fR\fR
.ad
.RS 16n
A component of the path prefix is not a directory.
.RE

.sp
.ne 2
.na
\fB\fBENXIO\fR\fR
.ad
.RS 16n
The named file is a character special or block special file, and the device
associated with this special file does not exist.
.RE

.sp
.ne 2
.na
\fB\fBEOVERFLOW\fR\fR
.ad
.RS 16n
The current value of the file position cannot be represented correctly in an
object of type \fBfpos_t\fR.
.RE

.sp
.ne 2
.na
\fB\fBEROFS\fR\fR
.ad
.RS 16n
The named file resides on a read-only file system and \fImode\fR requires write
access.
.RE

.sp
.LP
The \fBfopen()\fR function may fail if:
.sp
.ne 2
.na
\fB\fBEINVAL\fR\fR
.ad
.RS 16n
The value of the \fImode\fR argument is not valid.
.RE

.sp
.ne 2
.na
\fB\fBEMFILE\fR\fR
.ad
.RS 16n
{\fBFOPEN_MAX\fR} streams are currently open in the calling process.
.sp
{\fBSTREAM_MAX\fR} streams are currently open in the calling process.
.RE

.sp
.ne 2
.na
\fB\fBENAMETOOLONG\fR\fR
.ad
.RS 16n
Pathname resolution of a symbolic link produced an intermediate result whose
length exceeds {\fBPATH_MAX\fR}.
.RE

.sp
.ne 2
.na
\fB\fBENOMEM\fR\fR
.ad
.RS 16n
Insufficient storage space is available.
.RE

.sp
.ne 2
.na
\fB\fBETXTBSY\fR\fR
.ad
.RS 16n
The file is a pure procedure (shared text) file that is being executed and
\fImode\fR requires write access.
.RE

.SH USAGE
.LP
A process is allowed to have at least {\fBFOPEN_MAX\fR} \fBstdio\fR streams
open at a time. For 32-bit applications, however, the underlying ABIs formerly
required that no file descriptor used to access the file underlying a
\fBstdio\fR stream have a value greater than 255. To maintain binary
compatibility with earlier Solaris releases, this limit still constrains 32-bit
applications. However, when a 32-bit application is aware that no code that has
access to the \fBFILE\fR pointer returned by \fBfopen()\fR will use the
\fBFILE\fR pointer to directly access any fields in the \fBFILE\fR structure,
the \fBF\fR character can be used as the last character in the \fImode\fR
argument to circumvent this limit. Because it could lead to data corruption,
the \fBF\fR character in \fImode\fR must never be used when the \fBFILE\fR
pointer might later be used by binary code unknown to the user. The \fBF\fR
character in \fImode\fR is intended to be used by library functions that need a
\fBFILE\fR pointer to access data to process a user request, but do not need to
pass the \fBFILE\fR pointer back to the user. 32-bit applications that have
been inspected can use the extended FILE facility to circumvent this limit if
the inspection shows that no \fBFILE\fR pointers will be used to directly
access \fBFILE\fR structure contents.
.sp
.LP
The \fBfopen()\fR function has a transitional interface for 64-bit file
offsets.  See \fBlf64\fR(5).
.SH ATTRIBUTES
.LP
See \fBattributes\fR(5) for descriptions of the following attributes:
.sp

.sp
.TS
box;
c | c
l | l .
ATTRIBUTE TYPE	ATTRIBUTE VALUE
_
Interface Stability	See below.
_
MT-Level	MT-Safe
.TE

.sp
.LP
The \fBF\fR character in the \fImode\fR argument is Evolving. In all other
respects this function is Standard.
.SH SEE ALSO
.LP
\fBenable_extended_FILE_stdio\fR(3C), \fBfclose\fR(3C),
\fBfcloseall\fR(3C), \fBfdopen\fR(3C), \fBfflush\fR(3C),
\fBfreopen\fR(3C), \fBfsetpos\fR(3C), \fBrewind\fR(3C), \fBopen\fR(2),
\fBattributes\fR(5), \fBlf64\fR(5), \fBstandards\fR(5)
