.\"
.\" Sun Microsystems, Inc. gratefully acknowledges The Open Group for
.\" permission to reproduce portions of its copyrighted documentation.
.\" Original documentation from The Open Group can be obtained online at
.\" http://www.opengroup.org/bookstore/.
.\"
.\" The Institute of Electrical and Electronics Engineers and The Open
.\" Group, have given us permission to reprint portions of their
.\" documentation.
.\"
.\" In the following statement, the phrase ``this text'' refers to portions
.\" of the system documentation.
.\"
.\" Portions of this text are reprinted and reproduced in electronic form
.\" in the SunOS Reference Manual, from IEEE Std 1003.1, 2004 Edition,
.\" Standard for Information Technology -- Portable Operating System
.\" Interface (POSIX), The Open Group Base Specifications Issue 6,
.\" Copyright (C) 2001-2004 by the Institute of Electrical and Electronics
.\" Engineers, Inc and The Open Group.  In the event of any discrepancy
.\" between these versions and the original IEEE and The Open Group
.\" Standard, the original IEEE and The Open Group Standard is the referee
.\" document.  The original Standard can be obtained online at
.\" http://www.opengroup.org/unix/online.html.
.\"
.\" This notice shall appear on any product containing this material.
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\"
.\" Portions Copyright (c) 1992, X/Open Company Limited.  All Rights Reserved.
.\" Copyright (c) 2003, Sun Microsystems, Inc. All Rights Reserved.
.\"
.TH FPUTC 3C "May 13, 2017"
.SH NAME
fputc, putc, putc_unlocked, putchar, putchar_unlocked, putw \- put a byte on a
stream
.SH SYNOPSIS
.LP
.nf
#include <stdio.h>

\fBint\fR \fBfputc\fR(\fBint\fR \fIc\fR, \fBFILE *\fR\fIstream\fR);
.fi

.LP
.nf
\fBint\fR \fBputc\fR(\fBint\fR \fIc\fR, \fBFILE *\fR\fIstream\fR);
.fi

.LP
.nf
\fBint\fR \fBputc_unlocked\fR(\fBint\fR \fIc\fR, \fBFILE *\fR\fIstream\fR);
.fi

.LP
.nf
\fBint\fR \fBputchar\fR(\fBint\fR \fIc\fR);
.fi

.LP
.nf
\fBint\fR \fBputchar_unlocked\fR(\fBint\fR \fIc\fR);
.fi

.LP
.nf
\fBint\fR \fBputw\fR(\fBint\fR \fIw\fR, \fBFILE *\fR\fIstream\fR);
.fi

.SH DESCRIPTION
.LP
The \fBfputc()\fR function writes the byte specified by \fIc\fR (converted to
an \fBunsigned char\fR) to the output stream pointed to by \fIstream\fR, at the
position indicated by the associated file-position indicator for the stream (if
defined), and advances the indicator appropriately. If the file cannot support
positioning requests, or if the stream was opened with append mode, the byte is
appended to the output stream.
.sp
.LP
The \fBst_ctime\fR and \fBst_mtime\fR fields of the file will be marked for
update between the successful execution of \fBfputc()\fR and the next
successful completion of a call to \fBfflush\fR(3C) or \fBfclose\fR(3C) on the
same stream or a call to \fBexit\fR(3C) or \fBabort\fR(3C).
.sp
.LP
The \fBputc()\fR routine behaves like \fBfputc()\fR, except that it is
implemented as a macro. It runs faster than \fBfputc()\fR, but it takes up more
space per invocation and its name cannot be passed as an argument to a function
call.
.sp
.LP
The call \fBputchar(\fR\fIc\fR\fB)\fR is equivalent to \fBputc(\fR\fIc\fR\fB,
\fR\fIstdout\fR\fB).\fR The \fBputchar()\fR routine is implemented as a macro.
.sp
.LP
The \fBputc_unlocked()\fR and \fBputchar_unlocked()\fR routines are variants of
\fBputc()\fR and \fBputchar()\fR, respectively, that do not lock the stream.
It is the caller's responsibility to acquire the stream lock before calling
these routines and releasing the lock afterwards; see \fBflockfile\fR(3C) and
\fBstdio\fR(3C). These routines are implemented as macros.
.sp
.LP
The \fBputw()\fR function writes the word (that is, type \fBint\fR) \fIw\fR to
the output \fIstream\fR (at the position at which the file offset, if defined,
is pointing). The size of a word is the size of a type \fBint\fR and varies
from machine to machine.  The \fBputw()\fR function neither assumes nor causes
special alignment in the file.
.sp
.LP
The \fBst_ctime\fR and \fBst_mtime\fR fields of the file will be marked for
update between the successful execution of \fBputw()\fR and the next successful
completion of a call to \fBfflush\fR(3C) or \fBfclose\fR(3C) on the same stream
or a call to \fBexit\fR(3C) or \fBabort\fR(3C).
.SH RETURN VALUES
.LP
Upon successful completion, \fBfputc()\fR, \fBputc()\fR, \fBputc_unlocked()\fR,
\fBputchar()\fR, and \fBputchar_unlocked()\fR return the value that was
written.  Otherwise, these functions return EOF, the error indicator for the
stream is set, and \fBerrno\fR is set to indicate the error.
.sp
.LP
Upon successful completion, \fBputw()\fR returns \fB0\fR. Otherwise, it returns
a non-zero value, sets the error indicator for the associated \fIstream\fR, and
sets \fBerrno\fR to indicate the error.
.sp
.LP
An unsuccessful completion will occur, for example, if the file associated with
\fIstream\fR is not open for writing or if the output file cannot grow.
.SH ERRORS
.LP
The \fBfputc()\fR, \fBputc()\fR, \fBputc_unlocked()\fR, \fBputchar()\fR,
\fBputchar_unlocked()\fR, and \fBputw()\fR functions will fail if either the
\fIstream\fR is unbuffered or the \fIstream\fR's buffer needs to be flushed,
and:
.sp
.ne 2
.na
\fB\fBEAGAIN\fR\fR
.ad
.RS 10n
The \fBO_NONBLOCK\fR flag is set for the file descriptor underlying
\fIstream\fR and the process would be delayed in the write operation.
.RE

.sp
.ne 2
.na
\fB\fBEBADF\fR\fR
.ad
.RS 10n
The file descriptor underlying \fIstream\fR is not a valid file descriptor open
for writing.
.RE

.sp
.ne 2
.na
\fB\fBEFBIG\fR\fR
.ad
.RS 10n
An attempt was made to write to a file that exceeds the maximum file size or
the process' file size limit.
.RE

.sp
.ne 2
.na
\fB\fBEFBIG\fR\fR
.ad
.RS 10n
The file is a regular file and an attempt was made to write at or beyond the
offset maximum.
.RE

.sp
.ne 2
.na
\fB\fBEINTR\fR\fR
.ad
.RS 10n
The write operation was terminated due to the receipt of a signal, and no data
was transferred.
.RE

.sp
.ne 2
.na
\fB\fBEIO\fR\fR
.ad
.RS 10n
A physical I/O error has occurred, or the process is a member of a background
process group attempting to write to its controlling terminal, \fBTOSTOP\fR is
set, the process is neither ignoring nor blocking \fBSIGTTOU\fR and the process
group of the process is orphaned. This error may also be returned under
implementation-dependent conditions.
.RE

.sp
.ne 2
.na
\fB\fBENOSPC\fR\fR
.ad
.RS 10n
There was no free space remaining on the device containing the file.
.RE

.sp
.ne 2
.na
\fB\fBEPIPE\fR\fR
.ad
.RS 10n
An attempt is made to write to a pipe or \fBFIFO\fR that is not open for
reading by any process. A \fBSIGPIPE\fR signal will also be sent to the calling
thread.
.RE

.sp
.LP
The \fBfputc()\fR, \fBputc()\fR, \fBputc_unlocked()\fR, \fBputchar()\fR,
\fBputchar_unlocked()\fR, and \fBputw()\fR functions may fail if:
.sp
.ne 2
.na
\fB\fBENOMEM\fR\fR
.ad
.RS 10n
Insufficient storage space is available.
.RE

.sp
.ne 2
.na
\fB\fBENXIO\fR\fR
.ad
.RS 10n
A request was made of a non-existent device, or the request was outside the
capabilities of the device.
.RE

.SH USAGE
.LP
Functions exist for the \fBputc()\fR, \fBputc_unlocked()\fR, \fBputchar()\fR,
and \fBputchar_unlocked()\fR macros. To get the function form, the macro name
must be undefined (for example, \fB#undef putc\fR).
.sp
.LP
When the macro forms are used, \fBputc()\fR and \fBputc_unlocked()\fR evaluate
the \fIstream\fR argument more than once. In particular, \fBputc(\fR\fIc\fR\fB,
\fR\fI*f++\fR\fB);\fR does not work sensibly.  The \fBfputc()\fR function
should be used instead when evaluating the \fIstream\fR argument has side
effects.
.sp
.LP
Because of possible differences in word length and byte ordering, files written
using \fBputw()\fR are implementation-dependent, and possibly cannot be read
using \fBgetw\fR(3C) by a different application or by the same application
running in a different environment.
.sp
.LP
The \fBputw()\fR function is inherently byte stream oriented and is not tenable
in the context of either multibyte character streams or wide-character streams.
Application programmers are encouraged to use one of the character-based output
functions instead.
.SH ATTRIBUTES
.LP
See \fBattributes\fR(5) for descriptions of the following attributes:
.sp

.sp
.TS
box;
c | c
l | l .
ATTRIBUTE TYPE	ATTRIBUTE VALUE
_
Interface Stability	T{
\fBfputc()\fR, \fBputc()\fR, \fBputc_unlocked()\fR, \fBputchar()\fR, and \fBputchar_unlocked()\fR are Standard.
T}
_
MT-Level	See \fBNOTES\fR below.
.TE

.SH SEE ALSO
.LP
\fBgetrlimit\fR(2), \fBulimit\fR(2) \fBwrite\fR(2), \fBIntro\fR(3),
\fBabort\fR(3C), \fBexit\fR(3C), \fBfclose\fR(3C), \fBferror\fR(3C),
\fBfflush\fR(3C), \fBflockfile\fR(3C), \fBprintf\fR(3C),
\fBputc\fR(3C), \fBputs\fR(3C), \fBsetbuf\fR(3C), \fBstdio\fR(3C),
\fBattributes\fR(5), \fBstandards\fR(5)
.SH NOTES
.LP
The \fBfputc()\fR, \fBputc()\fR, \fBputchar()\fR, and \fBputw()\fR routines are
MT-Safe in multithreaded applications.  The \fBputc_unlocked()\fR and
\fBputchar_unlocked()\fR routines are unsafe in multithreaded applications.
