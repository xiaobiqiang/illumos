.\"
.\" Sun Microsystems, Inc. gratefully acknowledges The Open Group for
.\" permission to reproduce portions of its copyrighted documentation.
.\" Original documentation from The Open Group can be obtained online at
.\" http://www.opengroup.org/bookstore/.
.\"
.\" The Institute of Electrical and Electronics Engineers and The Open
.\" Group, have given us permission to reprint portions of their
.\" documentation.
.\"
.\" In the following statement, the phrase ``this text'' refers to portions
.\" of the system documentation.
.\"
.\" Portions of this text are reprinted and reproduced in electronic form
.\" in the SunOS Reference Manual, from IEEE Std 1003.1, 2004 Edition,
.\" Standard for Information Technology -- Portable Operating System
.\" Interface (POSIX), The Open Group Base Specifications Issue 6,
.\" Copyright (C) 2001-2004 by the Institute of Electrical and Electronics
.\" Engineers, Inc and The Open Group.  In the event of any discrepancy
.\" between these versions and the original IEEE and The Open Group
.\" Standard, the original IEEE and The Open Group Standard is the referee
.\" document.  The original Standard can be obtained online at
.\" http://www.opengroup.org/unix/online.html.
.\"
.\" This notice shall appear on any product containing this material.
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\"
.\" Copyright (c) 1992, X/Open Company Limited.  All Rights Reserved.
.\" Portions Copyright (c) 2004, Sun Microsystems, Inc.  All Rights Reserved.
.\" Copyright 2014 Garrett D'Amore <garrett@damore.org>
.\"
.TH ISWALPHA 3C "April 9, 2016"
.SH NAME
iswalpha, isenglish, isideogram, iswideogram, isnumber, iswnumber,
isphonogram, iswphonogram, isspecial, iswspecial, iswalnum, iswascii,
iswblank, iswcntrl, iswdigit, iswgraph, iswlower, iswprint, iswpunct,
iswspace, iswupper, iswxdigit, iswhexnumber, iswalpha_l, iswideogram_l,
iswnumber_l, iswphonogram_l, iswspecial_l, iswalnum_l, iswascii_l,
iswblank_l, iswcntrl_l, iswdigit_l, iswgraph_l, iswlower_l, iswprint_l,
iswpunct_l, iswspace_l, iswupper_l, iswhexnumber_l \- wide-character
code classification functions

.SH SYNOPSIS
.LP
.nf
#include <wchar.h>
#include <wctype.h>

\fBint\fR \fBiswalpha\fR(\fBwint_t\fR \fIwc\fR);
.fi
.LP
.nf
\fBint\fR \fBisenglish\fR(\fBwint_t\fR \fIwc\fR);
.fi
.LP
.nf
\fBint\fR \fBisideogram\fR(\fBwint_t\fR \fIwc\fR);
.fi
.LP
.nf
\fBint\fR \fBisnumber\fR(\fBwint_t\fR \fIwc\fR);
.fi
.LP
.nf
\fBint\fR \fBisphonogram\fR(\fBwint_t\fR \fIwc\fR);
.fi
.LP
.nf
\fBint\fR \fBisspecial\fR(\fBwint_t\fR \fIwc\fR);
.fi
.LP
.nf
\fBint\fR \fBiswalnum\fR(\fBwint_t\fR \fIwc\fR);
.fi
.LP
.nf
\fBint\fR \fBiswascii\fR(\fBwint_t\fR \fIwc\fR);
.fi
.LP
.nf
\fBint\fR \fBiswblank\fR(\fBwint_t\fR \fIwc\fR);
.fi
.LP
.nf
\fBint\fR \fBiswcntrl\fR(\fBwint_t\fR \fIwc\fR);
.fi
.LP
.nf
\fBint\fR \fBiswdigit\fR(\fBwint_t\fR \fIwc\fR);
.fi
.LP
.nf
\fBint\fR \fBiswgraph\fR(\fBwint_t\fR \fIwc\fR);
.fi
.LP
.nf
\fBint\fR \fBiswlower\fR(\fBwint_t\fR \fIwc\fR);
.fi
.LP
.nf
\fBint\fR \fBiswprint\fR(\fBwint_t\fR \fIwc\fR);
.fi
.LP
.nf
\fBint\fR \fBiswpunct\fR(\fBwint_t\fR \fIwc\fR);
.fi
.LP
.nf
\fBint\fR \fBiswspace\fR(\fBwint_t\fR \fIwc\fR);
.fi
.LP
.nf
\fBint\fR \fBiswupper\fR(\fBwint_t\fR \fIwc\fR);
.fi
.LP
.nf
\fBint\fR \fBiswxdigit\fR(\fBwint_t\fR \fIwc\fR);
.fi
.LP
.nf
\fBint\fR \fBiswhexnumber\fR(\fBwint_t\fR \fIwc\fR);
.fi
.LP
.nf
\fBint\fR \fBiswideogram\fR(\fBwint_t\fR \fIwc\fR);
.fi
.LP
.nf
\fBint\fR \fBiswnumber\fR(\fBwint_t\fR \fIwc\fR);
.fi
.LP
.nf
\fBint\fR \fBiswphonogram\fR(\fBwint_t\fR \fIwc\fR);
.fi
.LP
.nf
\fBint\fR \fBiswspecial\fR(\fBwint_t\fR \fIwc\fR);
.fi
.LP
.nf
\fBint\fR \fBiswalpha_l\fR(\fBwint_t\fR \fIwc\fR, \fBlocale_t\fR \fIloc\fR);
.fi
.LP
.nf
\fBint\fR \fBiswideogram_l\fR(\fBwint_t\fR \fIwc\fR, \fBlocale_t\fR \fIloc\fR);
.fi
.LP
.nf
\fBint\fR \fBiswnumber_l\fR(\fBwint_t\fR \fIwc\fR, \fBlocale_t\fR \fIloc\fR);
.fi
.LP
.nf
\fBint\fR \fBiswphonogram_l\fR(\fBwint_t\fR \fIwc\fR, \fBlocale_t\fR \fIloc\fR);
.fi
.LP
.nf
\fBint\fR \fBiswspecial_l\fR(\fBwint_t\fR \fIwc\fR, \fBlocale_t\fR \fIloc\fR);
.fi
.LP
.nf
\fBint\fR \fBiswalnum_l\fR(\fBwint_t\fR \fIwc\fR, \fBlocale_t\fR \fIloc\fR);
.fi
.LP
.nf
\fBint\fR \fBiswascii_l\fR(\fBwint_t\fR \fIwc\fR, \fBlocale_t\fR \fIloc\fR);
.fi
.LP
.nf
\fBint\fR \fBiswblank_l\fR(\fBwint_t\fR \fIwc\fR, \fBlocale_t\fR \fIloc\fR);
.fi
.LP
.nf
\fBint\fR \fBiswcntrl_l\fR(\fBwint_t\fR \fIwc\fR, \fBlocale_t\fR \fIloc\fR);
.fi
.LP
.nf
\fBint\fR \fBiswdigit_l\fR(\fBwint_t\fR \fIwc\fR, \fBlocale_t\fR \fIloc\fR);
.fi
.LP
.nf
\fBint\fR \fBiswgraph_l\fR(\fBwint_t\fR \fIwc\fR, \fBlocale_t\fR \fIloc\fR);
.fi
.LP
.nf
\fBint\fR \fBiswlower_l\fR(\fBwint_t\fR \fIwc\fR, \fBlocale_t\fR \fIloc\fR);
.fi
.LP
.nf
\fBint\fR \fBiswprint_l\fR(\fBwint_t\fR \fIwc\fR, \fBlocale_t\fR \fIloc\fR);
.fi
.LP
.nf
\fBint\fR \fBiswpunct_l\fR(\fBwint_t\fR \fIwc\fR, \fBlocale_t\fR \fIloc\fR);
.fi
.LP
.nf
\fBint\fR \fBiswspace_l\fR(\fBwint_t\fR \fIwc\fR, \fBlocale_t\fR \fIloc\fR);
.fi
.LP
.nf
\fBint\fR \fBiswupper\fR(\fBwint_t\fR \fIwc\fR, \fBlocale_t\fR \fIloc\fR);
.fi
.LP
.nf
\fBint\fR \fBiswxdigit\fR(\fBwint_t\fR \fIwc\fR, \fBlocale_t\fR \fIloc\fR);
.fi
.LP
.nf
#include <xlocale.h>

\fBint\fR \fBiswhexnumber\fR(\fBwint_t\fR \fIwc\fR, \fBlocale_t\fR \fIloc\fR);
.fi

.SH DESCRIPTION
.LP
These functions test whether \fIwc\fR is a wide-character code representing a
character of a particular class defined in the \fBLC_CTYPE\fR category of the
current locale or the locale specified by \fIloc\fR.
.LP
The functions \fBiswalpha_l()\fR, \fBiswideogram_l()\fR, \fBiswnumber_l()\fR,
\fBiswphonogram_l()\fR, \fBiswspecial_l()\fR, \fBiswalnum_l()\fR,
\fBiswascii_l()\fR, \fBiswblank_l()\fR, \fBiswcntrl_l()\fR, \fBiswdigit_l()\fR,
\fBiswgraph_l()\fR, \fBiswlower_l()\fR, \fBiswprint_l()\fR, \fBiswpunct_l()\fR,
\fBiswspace_l()\fR, \fBiswupper_l()\fR, all behave identically to their
counterparts without the '\fB_l\fR' suffix, but instead of operating on the
current locale, they operate on the locale specified by \fIloc\fR.
.LP
The functions, \fBiswideogram()\fR, \fBiswnumber()\fR, \fBiswphonogram()\fR,
\fBiswspecial()\fR, and \fBiswhexnumber()\fR, are respectively identical to
\fBisideogram()\fR, \fBisnumber()\fR, \fBisphonogram()\fR, \fBisspecial()\fR,
\fBiswxdigit()\fR respectively.  They are provided for compatibility purposes.
.LP
In all cases, \fIwc\fR is a \fBwint_t\fR, the value of which must be a
wide-character code corresponding to a valid character in the current locale or
must equal the value of the macro \fBWEOF\fR. If the argument has any other
values, the behavior is undefined.
.sp
.ne 2
.na
\fB\fBiswalpha(\fR\fIwc\fR\fB)\fR\fR
.ad
.RS 19n
Tests whether \fIwc\fR is a wide-character code representing a character of
class "alpha" in the program's current locale.
.RE

.sp
.ne 2
.na
\fB\fBisenglish(\fR\fIwc\fR\fB)\fR\fR
.ad
.RS 19n
Tests whether \fIwc\fR is a wide-character code representing an English
language character, excluding \fBASCII\fR characters.
.RE

.sp
.ne 2
.na
\fB\fBisideogram(\fR\fIwc\fR\fB)\fR\fR
.ad
.RS 19n
Tests whether \fIwc\fR is a wide-character code representing an ideographic
language character, excluding \fBASCII\fR characters.
.RE

.sp
.ne 2
.na
\fB\fBisnumber(\fR\fIwc\fR\fB)\fR\fR
.ad
.RS 19n
Tests whether \fIwc\fR is a wide-character code representing digit [0\(mi9],
excluding \fBASCII\fR characters.
.RE

.sp
.ne 2
.na
\fB\fBisphonogram(\fR\fIwc\fR\fB)\fR\fR
.ad
.RS 19n
Tests whether \fIwc\fR is a wide-character code representing a phonetic
language character, excluding \fBASCII\fR characters.
.RE

.sp
.ne 2
.na
\fB\fBisspecial(\fR\fIwc\fR\fB)\fR\fR
.ad
.RS 19n
Tests whether \fIwc\fR is a wide-character code representing a special language
character, excluding \fBASCII\fR characters.
.RE

.sp
.ne 2
.na
\fB\fBiswalnum(\fR\fIwc\fR\fB)\fR\fR
.ad
.RS 19n
Tests whether \fIwc\fR is a wide-character code representing a character of
class "alpha" or "digit" in the program's current locale.
.RE

.sp
.ne 2
.na
\fB\fBiswascii(\fR\fIwc\fR\fB)\fR\fR
.ad
.RS 19n
Tests whether \fIwc\fR is a wide-character code representing an \fBASCII\fR
character.
.RE

.sp
.ne 2
.na
\fB\fBiswblank(\fR\fIwc\fR\fB)\fR\fR
.ad
.RS 19n
Tests whether \fIwc\fR is a wide-character code representing a character of
class "blank" in the program's current locale. This function is not available
to applications conforming to standards prior to SUSv3. See \fBstandards\fR(5).
.RE

.sp
.ne 2
.na
\fB\fBiswlower(\fR\fIwc\fR\fB)\fR\fR
.ad
.RS 19n
Tests whether \fIwc\fR is a wide-character code representing a character of
class "lower" in the program's current locale.
.RE

.sp
.ne 2
.na
\fB\fBiswcntrl(\fR\fIwc\fR\fB)\fR\fR
.ad
.RS 19n
Tests whether \fIwc\fR is a wide-character code representing a character of
class "cntrl" in the program's current locale.
.RE

.sp
.ne 2
.na
\fB\fBiswdigit(\fR\fIwc\fR\fB)\fR\fR
.ad
.RS 19n
Tests whether \fIwc\fR is a wide-character code representing a character of
class "digit" in the program's current locale.
.RE

.sp
.ne 2
.na
\fB\fBiswgraph(\fR\fIwc\fR\fB)\fR\fR
.ad
.RS 19n
Tests whether \fIwc\fR is a wide-character code representing a character of
class "graph" in the program's current locale.
.RE

.sp
.ne 2
.na
\fB\fBiswprint(\fR\fIwc\fR\fB)\fR\fR
.ad
.RS 19n
Tests whether \fIwc\fR is a wide-character code representing a character of
class "print" in the program's current locale.
.RE

.sp
.ne 2
.na
\fB\fBiswpunct(\fR\fIwc\fR\fB)\fR\fR
.ad
.RS 19n
Tests whether \fIwc\fR is a wide-character code representing a character of
class "punct" in the program's current locale.
.RE

.sp
.ne 2
.na
\fB\fBiswspace(\fR\fIwc\fR\fB)\fR\fR
.ad
.RS 19n
Tests whether \fIwc\fR is a wide-character code representing a character of
class "space" in the program's current locale.
.RE

.sp
.ne 2
.na
\fB\fBiswupper(\fR\fIwc\fR\fB)\fR\fR
.ad
.RS 19n
Tests whether \fIwc\fR is a wide-character code representing a character of
class "upper" in the program's current locale.
.RE

.sp
.ne 2
.na
\fB\fBiswxdigit(\fR\fIwc\fR\fB)\fR\fR
.ad
.RS 19n
Tests whether \fIwc\fR is a wide-character code representing a character of
class "xdigit" in the program's current locale.
.RE

.SH ATTRIBUTES
.LP
See \fBattributes\fR(5) for descriptions of the following attributes:
.TS
box;
c | c
l | l .
ATTRIBUTE TYPE	ATTRIBUTE VALUE
_
CSI	Enabled
_
Interface Stability	See below.
_
MT-Level	MT-Safe
.TE

.LP
The \fBiswalpha()\fR, \fBiswalnum()\fR, \fBiswblank()\fR, \fBiswcntrl()\fR,
\fBiswdigit()\fR, \fBiswgraph()\fR, \fBiswlower()\fR, \fBiswprint()\fR,
\fBiswpunct()\fR, \fBiswspace()\fR, \fBiswupper()\fR, and \fBiswxdigit()\fR
functions are Standard.
.LP
The \fBiswalpha_l()\fR, \fBiswalnum_l()\fR, \fBiswblank_l()\fR, \fBiswcntrl_l()\fR,
\fBiswdigit_l()\fR, \fBiswgraph_l()\fR, \fBiswlower_l()\fR, \fBiswprint_l()\fR,
\fBiswpunct_l()\fR, \fBiswspace_l()\fR, and \fBiswupper_l()\fR
functions are Standard.
.SH SEE ALSO
.LP
\fBlocaledef\fR(1), \fBnewlocale\fR(3C),
\fBsetlocale\fR(3C), \fBstdio\fR(3C), \fBuselocale\fR(3C),
\fBascii\fR(5), \fBattributes\fR(5), \fBstandards\fR(5)
