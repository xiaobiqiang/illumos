.\"
.\" Sun Microsystems, Inc. gratefully acknowledges The Open Group for
.\" permission to reproduce portions of its copyrighted documentation.
.\" Original documentation from The Open Group can be obtained online at
.\" http://www.opengroup.org/bookstore/.
.\"
.\" The Institute of Electrical and Electronics Engineers and The Open
.\" Group, have given us permission to reprint portions of their
.\" documentation.
.\"
.\" In the following statement, the phrase ``this text'' refers to portions
.\" of the system documentation.
.\"
.\" Portions of this text are reprinted and reproduced in electronic form
.\" in the SunOS Reference Manual, from IEEE Std 1003.1, 2004 Edition,
.\" Standard for Information Technology -- Portable Operating System
.\" Interface (POSIX), The Open Group Base Specifications Issue 6,
.\" Copyright (C) 2001-2004 by the Institute of Electrical and Electronics
.\" Engineers, Inc and The Open Group.  In the event of any discrepancy
.\" between these versions and the original IEEE and The Open Group
.\" Standard, the original IEEE and The Open Group Standard is the referee
.\" document.  The original Standard can be obtained online at
.\" http://www.opengroup.org/unix/online.html.
.\"
.\" This notice shall appear on any product containing this material.
.\"
.\" The contents of this file are subject to the terms of the
.\" Common Development and Distribution License (the "License").
.\" You may not use this file except in compliance with the License.
.\"
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
.\" or http://www.opensolaris.org/os/licensing.
.\" See the License for the specific language governing permissions
.\" and limitations under the License.
.\"
.\" When distributing Covered Code, include this CDDL HEADER in each
.\" file and include the License file at usr/src/OPENSOLARIS.LICENSE.
.\" If applicable, add the following below this CDDL HEADER, with the
.\" fields enclosed by brackets "[]" replaced with your own identifying
.\" information: Portions Copyright [yyyy] [name of copyright owner]
.\"
.\"
.\" Copyright 1989 AT&T
.\" Copyright (c) 2001, The IEEE and The Open Group.  All Rights Reserved.
.\" Copyright (c) 2002, Sun Microsystems, Inc.  All Rights Reserved.
.\" Copyright (c) 2014, Joyent, Inc.
.\"
.TH MKFIFO 3C "Apr 24, 2002"
.SH NAME
mkfifo, mkfifoat \- make a FIFO special file
.SH SYNOPSIS
.LP
.nf
#include <sys/types.h>
#include <sys/stat.h>

\fBint\fR \fBmkfifo\fR(\fBconst char *\fR\fIpath\fR, \fBmode_t\fR \fImode\fR);
.fi
.LP
.nf
\fBint\fR \fBmkfifoat\fR(\fBint\fR \fIfd\fR, \fBconst char *\fR\fIpath\fR, \fBmode_t\fR \fImode\fR);
.fi

.SH DESCRIPTION
.LP
The \fBmkfifo()\fR and \fBmkfifoat()\fR functions create a new FIFO special file
named by the pathname pointed to by \fIpath\fR.  The file permission bits of the
new FIFO are initialized from \fImode\fR.  The file permission bits of the
\fImode\fR argument are modified by the process's file creation mask (see
\fBumask\fR(2)).  Bits other than the file permission bits in \fImode\fR are
ignored.
.sp
.LP
If \fIpath\fR names a symbolic link, \fBmkfifo()\fR and \fBmkfifoat()\fR fail
and set \fBerrno\fR to \fBEEXIST\fR.
.sp
.LP
The FIFO's user ID is set to the process's effective user ID. The FIFO's group
ID is set to the group ID of the parent directory or to the effective group ID
of the process.
.sp
.LP
The \fBmkfifoat()\fR function is equivalent to \fBmkfifo()\fR; however, if
\fIpath\fR is a relative path, then it is resolved start at the directory
represented by \fIfd\fR. \fIfd\fR may be set to the special value of
\fBAT_FDCWD\fR which indicates that the current working directory should be used
to start resolving \fIpath\fR.
.sp
.LP
The \fBmkfifo()\fR function calls \fBmknod\fR(2) to create the file. The
\fBmkfifoat()\fR function calls \fBmknodat\fR(2) to create the file.
.sp
.LP
Upon successful completion, \fBmkfifo()\fR and \fBmkfifoat()\fR mark for update
the \fBst_atime\fR, \fBst_ctime\fR, and \fBst_mtime\fR fields of the file. Also,
the \fBst_ctime\fR and \fBst_mtime\fR fields of the directory that contains the
new entry are marked for update.
.SH RETURN VALUES
.LP
Upon successful completion, \fB0\fR is returned.  Otherwise, \fB\(mi1\fR is
returned and \fBerrno\fR is set to indicate the error.
.SH ERRORS
.LP
The \fBmkfifo()\fR and \fBmkfifoat()\fR functions will fail if:
.sp
.ne 2
.na
\fB\fBEACCES\fR\fR
.ad
.RS 16n
A component of the path prefix denies search permission, or write permission is
denied on the parent directory of the FIFO to be created.
.RE

.sp
.ne 2
.na
\fB\fBEEXIST\fR\fR
.ad
.RS 16n
The named file already exists.
.RE

.sp
.ne 2
.na
\fB\fBELOOP\fR\fR
.ad
.RS 16n
A loop exists in symbolic links encountered during resolution of the \fIpath\fR
argument.
.RE

.sp
.ne 2
.na
\fB\fBENAMETOOLONG\fR\fR
.ad
.RS 16n
The length of the \fIpath\fR argument exceeds {\fBPATH_MAX\fR} or a pathname
component is longer than {\fBNAME_MAX\fR}.
.RE

.sp
.ne 2
.na
\fB\fBENOENT\fR\fR
.ad
.RS 16n
A component of the path prefix specified by \fIpath\fR does not name an
existing directory or \fIpath\fR is an empty string.
.RE

.sp
.ne 2
.na
\fB\fBENOSPC\fR\fR
.ad
.RS 16n
The directory that would contain the new file cannot be extended or the file
system is out of file-allocation resources.
.RE

.sp
.ne 2
.na
\fB\fBENOTDIR\fR\fR
.ad
.RS 16n
A component of the path prefix is not a directory. For \fBmkfifoat()\fR,
\fIpath\fR is a relative path and \fIfd\fR is a valid file descriptor which is
not a directory.
.RE

.sp
.ne 2
.na
\fB\fBEROFS\fR\fR
.ad
.RS 16n
The named file resides on a read-only file system.
.RE

.sp
.LP
The \fBmkfifoat()\fR function will fail if:
.sp
.ne 2
.na
.B EBADF
.ad
.RS 16n
The \fIpath\fR argument is a relative path and \fIfd\fR is not a valid file
descriptor or the value \fBAT_FDCWD\fR.
.RE

.sp
.LP
The \fBmkfifo()\fR function may fail if:
.sp
.ne 2
.na
\fB\fBELOOP\fR\fR
.ad
.RS 16n
Too many symbolic links were encountered in resolving \fIpath\fR.
.RE

.sp
.ne 2
.na
\fB\fBENAMETOOLONG\fR\fR
.ad
.RS 16n
The length of the \fIpath\fR argument exceeds {\fBPATH_MAX\fR} or a pathname
component is longer than {\fBNAME_MAX\fR}.
.RE

.SH EXAMPLES
.LP
\fBExample 1 \fRCreate a FIFO File
.sp
.LP
The following example demonstrates how to create a FIFO file named
\fB/home/cnd/mod_done\fR with read and write permissions for the owner and read
permissions for the group and others.

.sp
.in +2
.nf
#include sys/types.h>
#include sys/stat.h>
int status;
\&...
status = mkfifo("/home/cnd/mod_done", S_IWUSR | S_IRUSR |
        S_IRGRP | S_IROTH);
.fi
.in -2

.SH ATTRIBUTES
.LP
See \fBattributes\fR(5) for descriptions of the following attributes:
.sp

.sp
.TS
box;
c | c
l | l .
ATTRIBUTE TYPE	ATTRIBUTE VALUE
_
Interface Stability	Standard
_
MT-Level	MT-Safe
.TE

.SH SEE ALSO
.LP
\fBmkdir\fR(1), \fBchmod\fR(2), \fBexec\fR(2), \fBmknod\fR(2), \fBumask\fR(2),
\fBstat.h\fR(3HEAD), \fBufs\fR(7FS), \fBattributes\fR(5), \fBstandards\fR(5)
