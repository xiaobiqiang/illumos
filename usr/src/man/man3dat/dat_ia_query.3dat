'\" te
.\" This manual page is derived from the DAT/uDAPL 1.2 specification.
.\" Portions Copyright (c) 2007, Sun Microsystems, Inc. All Rights Reserved.
.\" The contents of this file are subject to the terms of the Common Development and Distribution License (the "License").  You may not use this file except in compliance with the License.
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE or http://www.opensolaris.org/os/licensing.  See the License for the specific language governing permissions and limitations under the License.
.\" When distributing Covered Code, include this CDDL HEADER in each file and include the License file at usr/src/OPENSOLARIS.LICENSE.  If applicable, add the following below this CDDL HEADER, with the fields enclosed by brackets "[]" replaced with your own identifying information: Portions Copyright [yyyy] [name of copyright owner]
.TH DAT_IA_QUERY 3DAT "Jul 16, 2004"
.SH NAME
dat_ia_query \- query an IA
.SH SYNOPSIS
.LP
.nf
cc [ \fIflag\fR\&.\|.\|. ] \fIfile\fR\&.\|.\|. \fB-ldat\fR [ \fIlibrary\fR\&.\|.\|. ]
#include <\fBdat/udat.h\fR>

DAT_RETURN
    dat_ia_query (
    IN    DAT_IA_HANDLE           \fIia_handle\fR,
    OUT   DAT_EVD_HANDLE          *\fIasync_evd_handle\fR,
    IN    DAT_IA_ATTR_MASK        \fIia_attr_mask\fR,
    OUT   DAT_IA_ATTR             *\fIia_attributes\fR,
    IN    DAT_PROVIDER_ATTR_MASK  \fIprovider_attr_mask\fR,
    OUT   DAT_PROVIDER_ATTR       *\fIprovider_attributes\fR
    )
.fi

.SH PARAMETERS
.ne 2
.na
\fB\fIia_handle\fR\fR
.ad
.RS 23n
Handle for an open instance of an IA.
.RE

.sp
.ne 2
.na
\fB\fIasync_evd_handle\fR\fR
.ad
.RS 23n
Handle for an Event Dispatcher for asynchronous events generated by the IA.
.RE

.sp
.ne 2
.na
\fB\fIia_attr_mask\fR\fR
.ad
.RS 23n
Mask for the \fIia_attributes\fR.
.RE

.sp
.ne 2
.na
\fB\fIia_attributes\fR\fR
.ad
.RS 23n
Pointer to a Consumer-allocated structure that the Provider fills with IA
attributes.
.RE

.sp
.ne 2
.na
\fB\fIprovider_attr_mask\fR\fR
.ad
.RS 23n
Mask for the \fIprovider_attributes\fR.
.RE

.sp
.ne 2
.na
\fB\fIprovider_attributes\fR\fR
.ad
.RS 23n
Pointer to a Consumer-allocated structure that the Provider fills with Provider
attributes.
.RE

.SH DESCRIPTION
.LP
The \fBdat_ia_query()\fR functions provides the Consumer with the IA
parameters, as well as the IA and Provider attributes. Consumers pass in
pointers to Consumer-allocated structures for the IA and Provider attributes
that the Provider fills.
.sp
.LP
The \fIia_attr_mask\fR and \fIprovider_attr_mask\fR parameters allow the
Consumer to specify which attributes to query. The Provider returns values for
requested attributes. The Provider can also return values for any of the other
attributes.
.SS "Interface Adapter Attributes"
.LP
The IA attributes are common to all open instances of the IA. DAT defines a
method to query the IA attributes but does not define a method to modify them.
.sp
.LP
If IA is multiported, each port is presented to a Consumer as a separate IA.
.sp
.ne 2
.na
\fBAdapter name:\fR
.ad
.br
.na
\fB\fR
.ad
.sp .6
.RS 4n
The name of the IA controlled by the Provider. The same as \fIia_name_ptr\fR.
.RE

.sp
.ne 2
.na
\fBVendor name:\fR
.ad
.sp .6
.RS 4n
Vendor if IA hardware.
.RE

.sp
.ne 2
.na
\fBHW version major:\fR
.ad
.sp .6
.RS 4n
Major version of IA hardware.
.RE

.sp
.ne 2
.na
\fBHW version minor:\fR
.ad
.sp .6
.RS 4n
Minor version of IA hardware.
.RE

.sp
.ne 2
.na
\fBFirmware version major:\fR
.ad
.sp .6
.RS 4n
Major version of IA firmware.
.RE

.sp
.ne 2
.na
\fBFirmware version minor:\fR
.ad
.sp .6
.RS 4n
Minor version of IA firmware.
.RE

.sp
.ne 2
.na
\fBIA_address_ptr:\fR
.ad
.sp .6
.RS 4n
An address of the interface Adapter.
.RE

.sp
.ne 2
.na
\fBMax EPs:\fR
.ad
.sp .6
.RS 4n
Maximum number of Endpoints that the IA can support. This covers all Endpoints
in all states, including the ones used by the Providers, zero or more
applications, and management.
.RE

.sp
.ne 2
.na
\fBMax DTOs per EP:\fR
.ad
.sp .6
.RS 4n
Maximum number of DTOs and RMR_binds that any Endpoint can support for a single
direction. This means the maximum number of outstanding and in-progress Send,
RDMA Read, RDMA Write DTOs, and RMR Binds at any one time for any Endpoint; and
maximum number of outstanding and in-progress Receive DTOs at any one time for
any Endpoint.
.RE

.sp
.ne 2
.na
\fBMax incoming RDMA Reads per EP:\fR
.ad
.sp .6
.RS 4n
Maximum number of RDMA Reads that can be outstanding per (connected) Endpoint
with the IA as the target.
.RE

.sp
.ne 2
.na
\fBMax outgoing RDMA Reads per EP:\fR
.ad
.sp .6
.RS 4n
Maximum number of RDMA Reads that can be outstanding per (connected) Endpoint
with the IA as the originator.
.RE

.sp
.ne 2
.na
\fBMax EVDs:\fR
.ad
.sp .6
.RS 4n
Maximum number of Event Dispatchers that an IA can support. An IA cannot
support an Event Dispatcher directly, but indirectly by Transport-specific
Objects, for example, Completion Queues for Infiniband\(tm and VI. The Event
Dispatcher Objects can be shared among multiple Providers and similar Objects
from other APIs, for example, Event Queues for uDAPL.
.RE

.sp
.ne 2
.na
\fBMax EVD queue size:\fR
.ad
.sp .6
.RS 4n
Maximum size of the EVD queue supported by an IA.
.RE

.sp
.ne 2
.na
\fBMax IOV segments per DTO:\fR
.ad
.sp .6
.RS 4n
Maximum entries in an IOV list that an IA supports. Notice that this number
cannot be explicit but must be implicit to transport-specific Object entries.
For example, for IB, it is the maximum number of scatter/gather entries per
Work Request, and for VI it is the maximum number of data segments per VI
Descriptor.
.RE

.sp
.ne 2
.na
\fBMax LMRs:\fR
.ad
.sp .6
.RS 4n
Maximum number of Local Memory Regions IA supports among all Providers and
applications of this IA.
.RE

.sp
.ne 2
.na
\fBMax LMR block size:\fR
.ad
.sp .6
.RS 4n
Maximum contiguous block that can be registered by the IA.
.RE

.sp
.ne 2
.na
\fBMac LMR VA:\fR
.ad
.sp .6
.RS 4n
Highest valid virtual address within the context of an LMR. Frequently, IAs on
32-bit architectures support only 32-bit local virtual addresses.
.RE

.sp
.ne 2
.na
\fBMax PZs:\fR
.ad
.sp .6
.RS 4n
Maximum number of Protection Zones that the IA supports.
.RE

.sp
.ne 2
.na
\fBMax MTU size:\fR
.ad
.sp .6
.RS 4n
Maximum message size supported by the IA
.RE

.sp
.ne 2
.na
\fBMax RDMA size:\fR
.ad
.sp .6
.RS 4n
Maximum RDMA size supported by the IA
.RE

.sp
.ne 2
.na
\fBMax RMRs:\fR
.ad
.sp .6
.RS 4n
Maximum number of RMRs an IA supports among all Providers and applications of
this IA.
.RE

.sp
.ne 2
.na
\fBMax RMR target address:\fR
.ad
.sp .6
.RS 4n
Highest valid target address with the context of a local RMR. Frequently, IAs
on 32-bit architectures support only 32-bit local virtual addresses.
.RE

.sp
.ne 2
.na
\fBNum transport attributes:\fR
.ad
.sp .6
.RS 4n
Number of transport-specific attributes.
.RE

.sp
.ne 2
.na
\fBTransport-specific attributes:\fR
.ad
.sp .6
.RS 4n
Array of transport-specific attributes. Each entry has the format of
\fBDAT_NAMED_ATTR\fR, which is a structure with two elements. The first element
is the name of the attribute. The second element is the value of the attribute
as a string.
.RE

.sp
.ne 2
.na
\fBNum vendor attributes:\fR
.ad
.sp .6
.RS 4n
Number of vendor-specific attributes.
.RE

.sp
.ne 2
.na
\fBVendor-specific attributes:\fR
.ad
.sp .6
.RS 4n
Array of vendor-specific attributes. Each entry has the format of
\fBDAT_NAMED_ATTR\fR, which is a structure with two elements. The first element
is the name of the attribute. The second element is the value of the attribute
as a string.
.RE

.SS "DAPL Provider Attributes"
.LP
The provider attributes are specific to the open instance of the IA. DAT
defines a method to query Provider attributes but does not define a method to
modify them.
.sp
.ne 2
.na
\fBProvider name:\fR
.ad
.sp .6
.RS 4n
Name of the Provider vendor.
.RE

.sp
.ne 2
.na
\fBProvider version major:\fR
.ad
.sp .6
.RS 4n
Major Version of uDAPL Provider.
.RE

.sp
.ne 2
.na
\fBProvider version minor:\fR
.ad
.sp .6
.RS 4n
Minor Version of uDAPL Provider.
.RE

.sp
.ne 2
.na
\fBDAPL API version major:\fR
.ad
.sp .6
.RS 4n
Major Version of uDAPL API supported.
.RE

.sp
.ne 2
.na
\fBDAPL API version minor:\fR
.ad
.sp .6
.RS 4n
Minor Version of uDAPL API supported.
.RE

.sp
.ne 2
.na
\fBLMR memory types supported:\fR
.ad
.sp .6
.RS 4n
Memory types that LMR Create supports for memory registration. This value is a
union of LMR Memory Types \fBDAT_MEM_TYPE_VIRTUAL\fR, \fBDAT_MEM_TYPE_LMR\fR,
and \fBDAT_MEM_TYPE_SHARED_VIRTUAL\fR that the Provider supports. All Providers
must support the following Memory Types: \fBDAT_MEM_TYPE_VIRTUAL\fR,
\fBDAT_MEM_TYPE_LMR\fR, and \fBDAT_MEM_TYPE_SHARED_VIRTUAL\fR.
.RE

.sp
.ne 2
.na
\fBIOV ownership:\fR
.ad
.sp .6
.RS 4n
An enumeration flag that specifies the ownership of the local buffer
description (IOV list) after post DTO returns. The three values are as follows:
.RS +4
.TP
.ie t \(bu
.el o
\fBDAT_IOV_CONSUMER\fR indicates that the Consumer has the ownership of the
local buffer description after a post returns.
.RE
.RS +4
.TP
.ie t \(bu
.el o
\fBDAT_IOV_PROVIDER_NOMOD\fR indicates that the Provider still has ownership of
the local buffer description of the DTO when the post DTO returns, but the
Provider does not modify the buffer description.
.RE
.RS +4
.TP
.ie t \(bu
.el o
\fBDAT_IOV_PROVIDER_MOD\fR indicates that the Provider still has ownership of
the local buffer description of the DTO when the post DTO returns and can
modify the buffer description.
.RE
In any case, the Consumer obtains ownership of the local buffer description
after the DTO transfer is completed and the Consumer is notified through a DTO
completion event.
.RE

.sp
.ne 2
.na
\fBQOS supported:\fR
.ad
.sp .6
.RS 4n
The union of the connection QOS supported by the Provider.
.RE

.sp
.ne 2
.na
\fBCompletion flags supported:\fR
.ad
.sp .6
.RS 4n
The following values for the completion flag \fBDAT_COMPLETION_FLAGS\fR are
supported by the Provider: \fBDAT_COMPLETION_SUPPRESS_FLAG\fR,
\fBDAT_COMPLETION_UNSIGNALLED_FLAG\fR,
\fBDAT_COMPLETION_SOLICITED_WAIT_FLAG\fR, and
\fBDAT_COMPLETION_BARRIER_FENCE_FLAG\fR.
.RE

.sp
.ne 2
.na
\fBThread safety:\fR
.ad
.sp .6
.RS 4n
Provider Library thread safe or not. The Provider Library is not required to be
thread safe.
.RE

.sp
.ne 2
.na
\fBMax private data size:\fR
.ad
.sp .6
.RS 4n
Maximum size of private data the Provider supports. This value is at least 64
bytes.
.RE

.sp
.ne 2
.na
\fBMultipathing support:\fR
.ad
.sp .6
.RS 4n
Capability of the Provider to support Multipathing for connection
establishment.
.RE

.sp
.ne 2
.na
\fBEP creator for PSP:\fR
.ad
.sp .6
.RS 4n
Indicator for who can create an Endpoint for a Connection Request. For the
Consumer it is \fBDAT_PSP_CREATES_EP_NEVER\fR. For the Provider it is
\fBDAT_PSP_CREATES_EP_ALWAYS\fR. For both it is
\fBDAT_PSP_CREATES_EP_IFASKED\fR. This attribute is used for Public Service
Point creation.
.RE

.sp
.ne 2
.na
\fBPZ support:\fR
.ad
.sp .6
.RS 4n
Indicator of what kind of protection the Provider's PZ provides.
.RE

.sp
.ne 2
.na
\fBOptimal Buffer Alignment:\fR
.ad
.sp .6
.RS 4n
Local and remote DTO buffer alignment for optimal performance on the Platform.
The \fBDAT_OPTIMAL_ALIGNMENT\fR must be divisible by this attribute value. The
maximum allowed value is \fBDAT_OPTIMAL_ALIGNMENT\fR, or 256.
.RE

.sp
.ne 2
.na
\fBEVD stream merging support:\fR
.ad
.sp .6
.RS 4n
A 2D binary matrix where each row and column represent an event stream type.
Each binary entry is 1 if the event streams of its row and column can be fed to
the same EVD, and 0 otherwise.
.sp
More than two different event stream types can feed the same EVD if for each
pair of the event stream types the entry is 1.
.sp
The Provider should support merging of all event stream types.
.sp
The Consumer should check this attribute before requesting an EVD that merges
multiple event stream types.
.RE

.sp
.ne 2
.na
\fBNum provider attributes:\fR
.ad
.sp .6
.RS 4n
Number of Provider-specific attributes.
.RE

.sp
.ne 2
.na
\fBProvider-specific attributes:\fR
.ad
.sp .6
.RS 4n
Array of Provider-specific attributes. Each entry has the format of
\fBDAT_NAMED_ATTR\fR, which is a structure with two elements. The first element
is the name of the attribute. The second element is the value of the attribute
as a string.
.RE

.SH RETURN VALUES
.ne 2
.na
\fB\fBDAT_SUCCESS\fR\fR
.ad
.RS 25n
The operation was successful.
.RE

.sp
.ne 2
.na
\fB\fBDAT_INVALID_PARAMETER\fR\fR
.ad
.RS 25n
Invalid parameter;
.RE

.sp
.ne 2
.na
\fB\fBDAT_INVALID_HANDLE\fR\fR
.ad
.RS 25n
Invalid DAT handle; ia_handle is invalid.
.RE

.SH ATTRIBUTES
.LP
See \fBattributes\fR(5) for descriptions of the following attributes:
.sp

.sp
.TS
box;
c | c
l | l .
ATTRIBUTE TYPE	ATTRIBUTE VALUE
_
Interface Stability	Standard: uDAPL, 1.1, 1.2
_
MT-Level	Safe
.TE

.SH SEE ALSO
.LP
\fBlibdat\fR(3LIB), \fBattributes\fR(5)
