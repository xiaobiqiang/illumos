'\" te
.\" This manual page is derived from the DAT/uDAPL 1.2 specification.
.\" Portions Copyright (c) 2007, Sun Microsystems, Inc. All Rights Reserved.
.\" The contents of this file are subject to the terms of the Common Development and Distribution License (the "License").  You may not use this file except in compliance with the License.
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE or http://www.opensolaris.org/os/licensing.  See the License for the specific language governing permissions and limitations under the License.
.\" When distributing Covered Code, include this CDDL HEADER in each file and include the License file at usr/src/OPENSOLARIS.LICENSE.  If applicable, add the following below this CDDL HEADER, with the fields enclosed by brackets "[]" replaced with your own identifying information: Portions Copyright [yyyy] [name of copyright owner]
.TH DAT_EVD_POST_SE 3DAT "Jul 16, 2004"
.SH NAME
dat_evd_post_se \- post Software event to the Event Dispatcher event queue
.SH SYNOPSIS
.LP
.nf
cc [ \fIflag\fR\&.\|.\|. ] \fIfile\fR\&.\|.\|. \fB-ldat\fR [ \fIlibrary\fR\&.\|.\|. ]
#include <\fBdat/udat.h\fR>

DAT_RETURN
    dat_evd_post_se(
    IN        DAT_EVD_HANDLE    \fIevd_handle\fR,
    IN const  DAT_EVENT         *\fIevent\fR
    )
.fi

.SH PARAMETERS
.sp
.ne 2
.na
\fB\fIevd_handle\fR\fR
.ad
.RS 14n
Handle for an instance of the Event Dispatcher
.RE

.sp
.ne 2
.na
\fB\fIevent\fR\fR
.ad
.RS 14n
A pointer to a Consumer created Software Event.
.RE

.SH DESCRIPTION
.sp
.LP
The \fBdat_evd_post_se()\fR function posts Software events to the Event
Dispatcher event queue. This is analogous to event arrival on the Event
Dispatcher software Event Stream. The \fIevent\fR that the Consumer provides
adheres to the event format as defined in <\fBdat.h\fR>. The first element in
the \fIevent\fR provides the type of the event (\fBDAT_EVENT_TYPE_SOFTWARE\fR);
the rest provide the event-type-specific parameters. These parameters are
opaque to a Provider. Allocation and release of the memory referenced by the
\fIevent\fR pointer in a software event are the Consumer's responsibility.
.sp
.LP
There is no ordering between events from different Event Streams. All the
synchronization issues between multiple Consumer contexts trying to post events
to an Event Dispatcher instance simultaneously are left to a Consumer.
.sp
.LP
If the event queue is full, the operation is completed unsuccessfully and
returns \fBDAT_QUEUE_FULL\fR. The \fIevent\fR is not queued. The queue overflow
condition does takes place and, therefore, the asynchronous Event Dispatcher is
not effected.
.SH RETURN VALUES
.sp
.ne 2
.na
\fB\fBDAT_SUCCESS\fR\fR
.ad
.RS 25n
The operation was successful.
.RE

.sp
.ne 2
.na
\fB\fBDAT_INVALID_HANDLE\fR\fR
.ad
.RS 25n
The \fIevd_handle\fR parameter is invalid.
.RE

.sp
.ne 2
.na
\fB\fBDAT_INVALID_PARAMETER\fR\fR
.ad
.RS 25n
The \fIevent\fR parameter is invalid.
.RE

.sp
.ne 2
.na
\fB\fBDAT_QUEUE_FULL\fR\fR
.ad
.RS 25n
The Event Dispatcher queue is full.
.RE

.SH ATTRIBUTES
.sp
.LP
See \fBattributes\fR(5) for descriptions of the following attributes:
.sp

.sp
.TS
box;
c | c
l | l .
ATTRIBUTE TYPE	ATTRIBUTE VALUE
_
Interface Stability	Standard: uDAPL, 1.1, 1.2
_
MT-Level	Unsafe
.TE

.SH SEE ALSO
.sp
.LP
\fBlibdat\fR(3LIB), \fBattributes\fR(5)
