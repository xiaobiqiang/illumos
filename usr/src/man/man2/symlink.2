'\" te
.\" Copyright (c) 2007, Sun Microsystems, Inc.  All Rights Reserved.
.\" Copyright 1989 AT&T
.\" The contents of this file are subject to the terms of the Common Development and Distribution License (the "License").  You may not use this file except in compliance with the License.
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE or http://www.opensolaris.org/os/licensing.  See the License for the specific language governing permissions and limitations under the License.
.\" When distributing Covered Code, include this CDDL HEADER in each file and include the License file at usr/src/OPENSOLARIS.LICENSE.  If applicable, add the following below this CDDL HEADER, with the fields enclosed by brackets "[]" replaced with your own identifying information: Portions Copyright [yyyy] [name of copyright owner]
.TH SYMLINK 2 "May 18, 2007"
.SH NAME
symlink \- make a symbolic link to a file
.SH SYNOPSIS
.LP
.nf
#include <unistd.h>

\fBint\fR \fBsymlink\fR(\fBconst char *\fR\fIname1\fR, \fBconst char *\fR\fIname2\fR);
.fi
.LP
.nf
\fBint\fR \fBsymlinkat\fR(\fBconst char *\fR\fIname1\fR, \fBint\fR \fIfd\fR, \fBconst char *\fR\fIname2\fR);
.fi

.SH DESCRIPTION
.LP
The \fBsymlink()\fR function creates a symbolic link \fIname2\fR to the file
\fIname1\fR. Either name may be an arbitrary pathname, the files need not be on
the same file system, and \fIname1\fR may be nonexistent.
.sp
.LP
The file to which the symbolic link points is used when an \fBopen\fR(2)
operation is performed on the link. A \fBstat()\fR operation performed on a
symbolic link returns the linked-to file, while an \fBlstat()\fR operation
returns information about the link itself.  See \fBstat\fR(2). Unexpected
results may occur when a symbolic link is made to a directory. To avoid
confusion in applications, the \fBreadlink\fR(2) call can be used to read the
contents of a symbolic link.
.sp
.LP
The \fBsymlinkat()\fR function behaves similarly to \fBsymlink()\fR; however,
when \fIpath2\fR is a relative path, then it will be looked up relative to the
directory specified by the file descriptor \fIfd\fR. To look up something in the
current working directory, the special value \fBAT_FDCWD\fR may be passed into
\fIfd\fR.
.SH RETURN VALUES
.LP
Upon successful completion, \fB0\fR is returned.  Otherwise, \fB\(mi1\fR is
returned, \fBerrno\fR is set to indicate the error, and the symbolic link is
not made.
.SH ERRORS
.LP
The \fBsymlink()\fR and \fBsymlinkat()\fR functions will fail if:
.sp
.ne 2
.na
\fB\fBEACCES\fR\fR
.ad
.RS 16n
Search permission is denied for a component of the path prefix of \fIname2\fR.
.RE

.sp
.ne 2
.na
\fB\fBEDQUOT\fR\fR
.ad
.RS 16n
The directory where the entry for the new symbolic link is being placed cannot
be extended because the user's quota of disk blocks on that file system has
been exhausted; the new symbolic link cannot be created because the user's
quota of disk blocks on that file system has been exhausted; or the user's
quota of inodes on the file system where the file is being created has been
exhausted.
.RE

.sp
.ne 2
.na
\fB\fBEEXIST\fR\fR
.ad
.RS 16n
The file referred to by \fIname2\fR already exists.
.RE

.sp
.ne 2
.na
\fB\fBEFAULT\fR\fR
.ad
.RS 16n
The \fIname1\fR or \fIname2\fR argument points to an illegal address.
.RE

.sp
.ne 2
.na
\fB\fBEILSEQ\fR\fR
.ad
.RS 16n
The path argument includes non-UTF8 characters and the file system accepts only
file names where all characters are part of the UTF-8 character codeset.
.RE

.sp
.ne 2
.na
\fB\fBEIO\fR\fR
.ad
.RS 16n
An I/O error occurs while reading from or writing to the file system.
.RE

.sp
.ne 2
.na
\fB\fBELOOP\fR\fR
.ad
.RS 16n
Too many symbolic links are encountered in translating \fIname2\fR.
.RE

.sp
.ne 2
.na
\fB\fBENAMETOOLONG\fR\fR
.ad
.RS 16n
The length of the \fIname2\fR argument exceeds \fBPATH_MAX\fR, or the length of
a \fIname2\fR component exceeds \fBNAME_MAX\fR while \fB_POSIX_NO_TRUNC\fR is
in effect.
.RE

.sp
.ne 2
.na
\fB\fBENOENT\fR\fR
.ad
.RS 16n
A component of the path prefix of \fIname2\fR does not exist.
.RE

.sp
.ne 2
.na
\fB\fBENOSPC\fR\fR
.ad
.RS 16n
The directory in which the entry for the new symbolic link is being placed
cannot be extended because no space is left on the file system containing the
directory; the new symbolic link cannot be created because no space is left on
the file system which will contain the link; or there are no free inodes on the
file system on which the file is being created.
.RE

.sp
.ne 2
.na
\fB\fBENOSYS\fR\fR
.ad
.RS 16n
The file system does not support symbolic links.
.RE

.sp
.ne 2
.na
\fB\fBENOTDIR\fR\fR
.ad
.RS 16n
A component of the path prefix of \fIname2\fR is not a directory. For
\fBsymlinkat()\fR, if \fIpath2\fR refers to a relative path and \fIfd\fR is a
valid file descriptor that is not a directory.
.RE

.sp
.ne 2
.na
\fB\fBEROFS\fR\fR
.ad
.RS 16n
The file \fIname2\fR would reside on a read-only file system.
.RE

.sp
.LP
The \fBsymlinkat()\fR function will fail if:
.sp
.ne 2
.na
.B EBADF
.ad
.RS 16n
The \fIpath2\fR argument is a relative path, and \fIfd\fR is not a valid, open
file descriptor or the special value \fBAT_FDCWD\fR.
.RE

.SH ATTRIBUTES
.LP
See \fBattributes\fR(5) for descriptions of the following attributes:
.sp

.sp
.TS
box;
c | c
l | l .
ATTRIBUTE TYPE	ATTRIBUTE VALUE
_
Interface Stability	Standard
.TE

.SH SEE ALSO
.LP
\fBcp\fR(1), \fBlink\fR(2), \fBopen\fR(2), \fBreadlink\fR(2), \fBstat\fR(2),
\fBunlink\fR(2), \fBattributes\fR(5)
