'\" te
.\" Copyright (C) 2005, Sun Microsystems, Inc.
.\" All Rights Reserved
.\" Copyright (c) 2014, Joyent, Inc.
.\" Copyright 1989 AT&T  All Rights Reserved
.\" The contents of this file are subject to the terms of the Common Development and Distribution License (the "License").  You may not use this file except in compliance with the License.
.\" You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE or http://www.opensolaris.org/os/licensing.  See the License for the specific language governing permissions and limitations under the License.
.\" When distributing Covered Code, include this CDDL HEADER in each file and include the License file at usr/src/OPENSOLARIS.LICENSE.  If applicable, add the following below this CDDL HEADER, with the fields enclosed by brackets "[]" replaced with your own identifying information: Portions Copyright [yyyy] [name of copyright owner]
.TH CONNECT 3SOCKET "Nov 25, 2014"
.SH NAME
connect \- initiate a connection on a socket
.SH SYNOPSIS
.LP
.nf
\fBcc\fR [ \fIflag\fR ... ] \fIfile\fR ... \fB-lsocket\fR \fB -lnsl \fR [ \fIlibrary\fR ... ]
#include <sys/types.h>
#include <sys/socket.h>



\fBint\fR \fBconnect\fR(\fBint\fR \fIs\fR, \fBconst struct sockaddr *\fR\fIname\fR, \fBint\fR \fInamelen\fR);
.fi

.SH DESCRIPTION
.LP
The parameter \fIs\fR is a socket. If it is of type \fBSOCK_DGRAM\fR,
\fBconnect()\fR specifies the peer with which the socket is to be associated.
This address is the address to which datagrams are to be sent if a receiver is
not explicitly designated. This address is the only address from which
datagrams are to be received. If the socket \fIs\fR is of type
\fBSOCK_STREAM\fR, \fBconnect()\fR attempts to make a connection to another
socket. The other socket is specified by \fIname\fR. \fIname\fR is an address
in the communication space of the socket. Each communication space interprets
the \fIname\fR parameter in its own way. If \fIs\fR is not bound, then \fIs\fR
will be bound to an address selected by the underlying transport provider.
Generally, stream sockets can successfully \fBconnect()\fR only once. Datagram
sockets can use \fBconnect()\fR multiple times to change their association.
Datagram sockets can dissolve the association by connecting to a null address.
.SS Non-blocking Sockets
When a socket is created, it is by default a \fBblocking\fR socket. A socket may
be configured to be \fBnon-blocking\fR either at socket creation time or through
the use of \fBfcntl\fR(2). When a socket is set to be \fBnon-blocking\fR, a call
to connect initiates an asynchronous connection. If the connection cannot be
completed without blocking, such as when making a TCP connection to a remote
server, then  the connection attempt is made in the background and \fBconnect\fR
returns -1 and errno is set to \fBEINPROGRESS\fR.
.LP
Applications can obtain the state of this connection attempt by polling the
socket's file descriptor for \fBPOLLOUT\fR. The event ports facility is the
preferred means of polling on the file descriptor, see \fBport_create\fR(3C) and
\fBport_get\fR(3C) for more information on event ports; however, applications
may also use traditional portable routines like \fBpoll\fR(2) and
\fBselect\fR(3C).
.LP
When an asynchronous connection has completed, the application must call
\fBgetsockopt\fR(3SOCKET) using the macro \fBSOL_SOCKET\fR as the \fIlevel\fR
argument and the macro \fBSO_ERROR\fR as the value of the \fIoption\fR argument.
If the value of the \fBSO_ERROR\fR socket option is zero, then the
connect was successfully established. Otherwise, the connection could not be
established and the value is the corresponding error code that would be commonly
found in \fBerrno\fR.
.LP
Even when a socket is in \fBnon-blocking\fR mode, a call to \fBconnect\fR may
fail synchronously. If any error other \fBEINPROGRESS\fR or \fBEINTR\fR occurs,
then there is no need for the application to poll for asynchronous completion.
Similarly, if a call to \fBconnect\fR returns successfully, then the socket
connection will be established and there is no need to poll for completion.
.SH EXAMPLES
.LP
\fBExample 1\fR  Performing an asynchronous connection
.sp
.LP
The following sample C program shows how to create and connect to a remote host
using TCP. The program should be compiled and linked against libnsl and
libsocket. For example, if the contents of this example where in a file called
example.c, one would run cc example.c -lnsl -lsocket.
.sp
.in +2
.nf
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <inttypes.h>
#include <stdio.h>
#include <strings.h>
#include <stdlib.h>
#include <errno.h>
#include <port.h>
#include <unistd.h>
#include <assert.h>

int
main(int argc, char *argv[])
{
	char *eptr;
	long port;
	int sock, ret, eport;
	struct sockaddr_in6 sin6;

	if (argc != 3) {
		fprintf(stderr, "connect: <IP> <port>\\n");
		return (1);
	}

	bzero(&sin6, sizeof (struct sockaddr_in6));
	sin6.sin6_family = AF_INET6;

	/*
	 * Try to parse as an IPv6 address and then try v4.
	 */
	ret = inet_pton(AF_INET6, argv[1], &sin6.sin6_addr);
	if (ret == -1) {
		perror("inet_pton");
		return (1);
	} else if (ret == 0) {
		struct in_addr v4;
		ret = inet_pton(AF_INET, argv[1], &v4);
		if (ret == -1) {
			perror("inet_pton");
			return (1);
		} else if (ret == 0) {
			fprintf(stderr, "connect: %s is not a valid "
			    "IPv4 or IPv6 address\\n", argv[1]);
			return (1);
		}
		/* N.B. Not a portable macro */
		IN6_INADDR_TO_V4MAPPED(&v4, &sin6.sin6_addr);
	}

	errno = 0;
	port = strtol(argv[2], &eptr, 10);
	if (errno != 0 || *eptr != '\e0') {
		fprintf(stderr, "failed to parse port %s\\n", argv[2]);
		return (1);
	}
	if (port <= 0 || port > UINT16_MAX) {
		fprintf(stderr, "invalid port: %ld\\n", port);
		return (1);
	}
	sin6.sin6_port = htons(port);

	sock = socket(AF_INET6, SOCK_STREAM | SOCK_NONBLOCK, 0);
	if (sock < 0) {
		perror("socket");
		return (1);
	}

	eport = port_create();
	if (eport < 0) {
		perror("port_create");
		(void) close(sock);
		return (1);
	}

	ret = connect(sock, (struct sockaddr *)&sin6,
	    sizeof (struct sockaddr_in6));
	if (ret != 0 && errno != EINPROGRESS && errno != EINTR) {
		perror("connect");
		(void) close(sock);
		(void) close(eport);
		return (1);
	}

	if (ret != 0) {
		port_event_t pe;
		int err;
		socklen_t sz = sizeof (err);
		if (port_associate(eport, PORT_SOURCE_FD, sock, POLLOUT,
		    NULL) != 0) {
			perror("port_associate");
			(void) close(sock);
			(void) close(eport);
			return (1);
		}
		if (port_get(eport, &pe, NULL) != 0) {
			perror("port_get");
			(void) close(sock);
			(void) close(eport);
			return (1);
		}
		assert(pe.portev_source == PORT_SOURCE_FD);
		assert(pe.portev_object == (uintptr_t)sock);
		if (getsockopt(sock, SOL_SOCKET, SO_ERROR, &err, &sz) != 0) {
			perror("getsockopt");
			(void) close(sock);
			(void) close(eport);
			return (1);
		}
		if (err != 0) {
			/* Asynch connect failed */
			fprintf(stderr, "asnchronous connect: %s\\n",
			    strerror(err));
			(void) close(sock);
			(void) close(eport);
			return (1);
		}
	}

	/* Read and write to the socket and then clean up */

	return (0);
}
.fi
.in -2
.SH RETURN VALUES
.LP
If the connection or binding succeeds, \fB0\fR is returned. Otherwise,
\fB\(mi1\fR is returned and sets \fBerrno\fR to indicate the error.
.SH ERRORS
.LP
The call fails if:
.sp
.ne 2
.na
\fB\fBEACCES\fR\fR
.ad
.RS 17n
Search permission is denied for a component of the path prefix of the pathname
in \fIname\fR.
.RE

.sp
.ne 2
.na
\fB\fBEADDRINUSE\fR\fR
.ad
.RS 17n
The address is already in use.
.RE

.sp
.ne 2
.na
\fB\fBEADDRNOTAVAIL\fR\fR
.ad
.RS 17n
The specified address is not available on the remote machine.
.RE

.sp
.ne 2
.na
\fB\fBEAFNOSUPPORT\fR\fR
.ad
.RS 17n
Addresses in the specified address family cannot be used with this socket.
.RE

.sp
.ne 2
.na
\fB\fBEALREADY\fR\fR
.ad
.RS 17n
The socket is non-blocking,  and a previous connection attempt has not yet been
completed.
.RE

.sp
.ne 2
.na
\fB\fBEBADF\fR\fR
.ad
.RS 17n
\fIs\fR is not a valid descriptor.
.RE

.sp
.ne 2
.na
\fB\fBECONNREFUSED\fR\fR
.ad
.RS 17n
The attempt to connect was forcefully rejected. The calling program should
\fBclose\fR(2) the socket descriptor, and issue another \fBsocket\fR(3SOCKET)
call to obtain a new descriptor before attempting another \fBconnect()\fR call.
.RE

.sp
.ne 2
.na
\fB\fBEINPROGRESS\fR\fR
.ad
.RS 17n
The socket is non-blocking, and the connection cannot be completed immediately.
See the section on \fBNon-blocking Sockets\fR for more information.
.RE

.sp
.ne 2
.na
\fB\fBEINTR\fR\fR
.ad
.RS 17n
The connection attempt was interrupted before any data arrived by the delivery
of a signal. The connection, however, will be established asynchronously.
.RE

.sp
.ne 2
.na
\fB\fBEINVAL\fR\fR
.ad
.RS 17n
\fInamelen\fR is not the size of a valid address for the specified address
family.
.RE

.sp
.ne 2
.na
\fB\fBEIO\fR\fR
.ad
.RS 17n
An I/O error occurred while reading from or writing to the file system.
.RE

.sp
.ne 2
.na
\fB\fBEISCONN\fR\fR
.ad
.RS 17n
The socket is already connected.
.RE

.sp
.ne 2
.na
\fB\fBELOOP\fR\fR
.ad
.RS 17n
Too many symbolic links were encountered in translating the pathname in
\fIname\fR.
.RE

.sp
.ne 2
.na
\fB\fBENETUNREACH\fR\fR
.ad
.RS 17n
The network is not reachable from this host.
.RE

.sp
.ne 2
.na
\fB\fBEHOSTUNREACH\fR\fR
.ad
.RS 17n
The remote host is not reachable from this host.
.RE

.sp
.ne 2
.na
\fB\fBENOENT\fR\fR
.ad
.RS 17n
A component of the path prefix of the pathname in \fIname\fR does not exist.
.RE

.sp
.ne 2
.na
\fB\fBENOENT\fR\fR
.ad
.RS 17n
The socket referred to by the pathname in \fIname\fR does not exist.
.RE

.sp
.ne 2
.na
\fB\fBENOSR\fR\fR
.ad
.RS 17n
There were insufficient \fBSTREAMS\fR resources available to complete the
operation.
.RE

.sp
.ne 2
.na
\fB\fBENXIO\fR\fR
.ad
.RS 17n
The server exited before the connection was complete.
.RE

.sp
.ne 2
.na
\fB\fBETIMEDOUT\fR\fR
.ad
.RS 17n
Connection establishment timed out without establishing a connection.
.RE

.sp
.ne 2
.na
\fB\fBEWOULDBLOCK\fR\fR
.ad
.RS 17n
The socket is marked as non-blocking, and the requested operation would block.
.RE

.sp
.LP
The following errors are specific to connecting names in the UNIX domain.
These errors might not apply in future versions of the UNIX  \fBIPC\fR domain.
.sp
.ne 2
.na
\fB\fBENOTDIR\fR\fR
.ad
.RS 14n
A component of the path prefix of the pathname in \fIname\fR is not a
directory.
.RE

.sp
.ne 2
.na
\fB\fBENOTSOCK\fR\fR
.ad
.RS 14n
\fIs\fR is not a socket.
.RE

.sp
.ne 2
.na
\fB\fBENOTSOCK\fR\fR
.ad
.RS 14n
\fIname\fR is not a socket.
.RE

.sp
.ne 2
.na
\fB\fBEPROTOTYPE\fR\fR
.ad
.RS 14n
The file that is referred to by \fIname\fR is a socket of a type other than
type \fIs\fR. For example, \fIs\fR is a \fBSOCK_DGRAM\fR socket, while
\fIname\fR refers to a \fBSOCK_STREAM\fR socket.
.RE

.SH ATTRIBUTES
.LP
See \fBattributes\fR(5) for descriptions of the following attributes:
.sp

.sp
.TS
box;
c | c
l | l .
ATTRIBUTE TYPE	ATTRIBUTE VALUE
_
MT-Level	Safe
.TE

.SH SEE ALSO
.LP
\fBclose\fR(2), \fBaccept\fR(3SOCKET), \fBgetsockname\fR(3SOCKET),
\fBselect\fR(3C), \fBsocket\fR(3SOCKET), \fBsockaddr\fR(3SOCKET),
\fBsocket.h\fR(3HEAD), \fBattributes\fR(5)
