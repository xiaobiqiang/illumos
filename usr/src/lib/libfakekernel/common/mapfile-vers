#
# This file and its contents are supplied under the terms of the
# Common Development and Distribution License ("CDDL"), version 1.0.
# You may only use this file in accordance with the terms of version
# 1.0 of the CDDL.
#
# A full copy of the text of the CDDL should have accompanied this
# source.  A copy of the CDDL is also available via the Internet at
# http://www.illumos.org/license/CDDL.
#

#
# Copyright 2015 Nexenta Systems, Inc.  All rights reserved.
# Copyright 2017 RackTop Systems.
# Copyright 2018, Joyent, Inc.
#

#
# MAPFILE HEADER START
#
# WARNING:  STOP NOW.  DO NOT MODIFY THIS FILE.
# Object versioning must comply with the rules detailed in
#
#	usr/src/lib/README.mapfiles
#
# You should not be making modifications here until you've read the most current
# copy of that file. If you need help, contact a gatekeeper for guidance.
#
# MAPFILE HEADER END
#

$mapfile_version 2

SYMBOL_VERSION SUNWprivate_1.1 {
    global:

	_curcred;
	_curproc;
	_curthread;
	_curzone;

	aok		{ FLAGS = NODIRECT };
	boot_time;
	cmn_err;
	copyinstr;
	copystr;

	cyclic_add;
	cyclic_remove;
	cyclic_reprogram;

	crfree;
	crgetuid;
	crgetruid;
	crgetgid;
	crgetngroups;
	crgetgroups;
	crhold;

	cv_broadcast;
	cv_destroy;
	cv_init;
	cv_reltimedwait;
	cv_reltimedwait_sig;
	cv_signal;
	cv_timedwait;
	cv_timedwait_sig;
	cv_timedwait_hires;
	cv_wait;
	cv_wait_sig;

	ddi_get_lbolt64;
	ddi_get_lbolt;
	ddi_get_pid;
	ddi_strtoul;
	ddi_strtoull;

	delay;

	fm_panic;

	fakekernel_cprintf	{ FLAGS = NODIRECT };
	fakekernel_init;
	fakekernel_putlog	{ FLAGS = NODIRECT };

	gethrestime;
	gethrestime_sec;
	gethrtime_unscaled;

	hz;

	highbit64;

	issig;

	kcred;
	kiconv;
	kiconv_close;
	kiconv_open;

	kmem_alloc;
	kmem_asprintf;
	kmem_cache_alloc;
	kmem_cache_create;
	kmem_cache_destroy;
	kmem_cache_free;
	kmem_cache_reap_active;
	kmem_cache_reap_soon;
	kmem_cache_set_move;
	kmem_debugging;
	kmem_free;
	kmem_zalloc;

	kmutex_destroy;
	kmutex_init;
	kmutex_enter;
	kmutex_exit;

	ksema_destroy;
	ksema_init;

	ksid_lookupdomain;
	ksiddomain_rele;

	ksocket_accept;
	ksocket_bind;
	ksocket_bind_helper	{ FLAGS = NODIRECT };
	ksocket_close;
	ksocket_connect;
	ksocket_getpeername;
	ksocket_getsockname;
	ksocket_hold;
	ksocket_ioctl;
	ksocket_listen;
	ksocket_recv;
	ksocket_recvfrom;
	ksocket_recvmsg;
	ksocket_rele;
	ksocket_send;
	ksocket_sendmsg;
	ksocket_sendto;
	ksocket_setsockopt;
	ksocket_shutdown;
	ksocket_socket;

	kstat_create;
	kstat_create_zone;
	kstat_named_init;
	kstat_delete;
	kstat_install;
	kstat_waitq_enter;
	kstat_waitq_exit;
	kstat_runq_enter;
	kstat_runq_exit;
	kstat_waitq_to_runq;
	kstat_runq_back_to_waitq;

	msec_per_tick;

	mutex_owned;
	mutex_owner;
	mutex_tryenter;

	nsec_per_tick;

	ovbcopy;
	p0;
	panic;
	panicargs;
	panicstr;

	random_get_bytes;
	random_get_pseudo_bytes;

	rw_destroy;
	rw_downgrade;
	rw_enter;
	rw_exit;
	rw_init;
	#rw_iswriter;	# missing, but not currently needed
	rw_lock_held;
	rw_owner;
	rw_read_held;
	rw_tryenter;
	rw_tryupgrade;
	rw_write_held;

	scalehrtime;

	#sema_held;	# call the libc version directly
	sema_p;
	sema_p_sig;
	sema_tryp;
	sema_v;

	strfree;

	system_taskq;
	system_taskq_fini;	
	system_taskq_init;
	taskq_create;
	taskq_create_proc;
	taskq_create_sysdc;
	taskq_destroy;
	taskq_dispatch;
	taskq_dispatch_ent;
	taskq_empty;
	taskq_member;
	taskq_wait;

	thread_create;
	thread_join;
	thread_exit;

	tsd_get;
	tsd_set;
	tsd_create;
	tsd_destroy;

	tick_per_msec;
	tsignal;
	uiomove;
	uioskip;
	usec_per_tick;
	vcmn_err;
	vmem_qcache_reap;
	vpanic;
	zone0;
	zone_kcred;
	zthread_create;
	zthread_exit;

    local:
	*;
};
